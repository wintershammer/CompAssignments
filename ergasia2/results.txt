Compiler Lecture Notes 1.0 documentation : http://di.ionio.gr/~mistral/tp/compilers/lecturedoc/index.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Μεταγλωττιστές - Σημειώσεις Μαθήματος και Εργαστηρίου &mdash; Compiler Lecture Notes 1.0 documentation</title>
    
    <link rel="stylesheet" href="_static/sphinxdoc.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="top" title="Compiler Lecture Notes 1.0 documentation" href="#" />
    <link rel="next" title="Βασικά Στοιχεία Python 3" href="unit1/module1.html" /> 
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="unit1/module1.html" title="Βασικά Στοιχεία Python 3"
             accesskey="N">next</a> |</li>
        <li><a href="#">Compiler Lecture Notes 1.0 documentation</a> &raquo;</li> 
      </ul>
    </div>

    <div class="document">
      <div class="documentwrapper">
          <div class="body">
            
  <div class="section" id="id1">
<h1>Μεταγλωττιστές - Σημειώσεις Μαθήματος και Εργαστηρίου<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h1>
<p>Περιεχόμενα:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="unit1/module1.html">Βασικά Στοιχεία Python 3</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#strings">Strings</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id1">Σύνθετα Αντικείμενα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#lists">Lists</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#dictionaries">Dictionaries</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id2">Αρχεία Κειμένου</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id3">Παράδειγμα: Συχνότητα Εμφάνισης Λέξεων</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id4">Μεταβλητές και Αναφορές</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="unit3/module1.html">Ενότητα 3-1</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#regular-expressions">Regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#python-regular-expressions">Python και regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#id2">Συνήθεις προδιαγραφές για regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#regular-expression">Μέθοδοι του αντικειμένου regular expression</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="unit4/module1.html">Scanning με το Plex</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id1">Οδηγίες εγκατάστασης</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id2">Απλό παράδειγμα χωρίς έλεγχο λαθών</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#exception-handling">Προσθέτοντας έλεγχο λαθών (exception handling)</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#plex-patterns">Plex patterns</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id3">Κανόνες Ταιριάσματος</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id4">Ο κανόνας του μακρύτερου ταιριάσματος</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id5">Αγνοώντας κείμενο με βάση το μακρύτερο ταίριασμα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id6">Σε ταίριασμα ίδιου μήκους προηγείται ό,τι δηλώθηκε πρώτα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#single-line">Αγνοώντας single-line σχόλια</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#multiple-line">Αγνοώντας multiple-line σχόλια /* ... */</a></li>
</ul>
</li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="unit1/module1.html" title="Βασικά Στοιχεία Python 3"
             >next</a> |</li>
        <li><a href="#">Compiler Lecture Notes 1.0 documentation</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer">
        &copy; Copyright 2016, mistral.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.2.
    </div>
  </body>
</html>
DFA : http://en.wikipedia.org/wiki/Deterministic_finite_automaton
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8"/>
<title>Deterministic finite automaton - Wikipedia, the free encyclopedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Deterministic_finite_automaton","wgTitle":"Deterministic finite automaton","wgCurRevisionId":710254958,"wgRevisionId":710254958,"wgArticleId":653404,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using citations with accessdate and no URL","Use dmy dates from July 2013","All articles with unsourced statements","Articles with unsourced statements from January 2015","Finite automata"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Deterministic_finite_automaton","wgRelevantArticleId":653404,"wgRequestId":"886948efe058d381523bfbd5","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSAcceptLanguageList":["en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCentralAuthMobileDomain":false,"wgWikibaseItemId":"Q837528","wgVisualEditorToolbarScrollOffset":0});mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function ( $, jQuery ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","ext.centralauth.centralautologin","mmv.head","ext.visualEditor.desktopArticleTarget.init","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","mw.MediaWikiPlayer.loader","mw.PopUpMediaTransform","ext.centralNotice.bannerController","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cfeatured-articles-links%2CrefToolbar%2Cswitcher%2Cteahouse%7Cext.math.styles%7Cext.tmh.thumbnail.styles%7Cext.uls.nojs%7Cext.visualEditor.desktopArticleTarget.noscript%7Cext.wikimediaBadges%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.raggett%2CsectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="generator" content="MediaWiki 1.27.0-wmf.19"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Deterministic_finite_automaton"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="copyright" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Deterministic_finite_automaton"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Deterministic_finite_automaton skin-vector action-view">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>

							<div id="siteNotice"><!-- CentralNotice --></div>
						<div class="mw-indicators">
</div>
			<h1 id="firstHeading" class="firstHeading" lang="en">Deterministic finite automaton</h1>
									<div id="bodyContent" class="mw-body-content">
									<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div role="note" class="hatnote">"DFSA" redirects here. DFSA may also refer to <a href="/wiki/Drug_facilitated_sexual_assault" title="Drug facilitated sexual assault">Drug facilitated sexual assault</a>.</div>
<div class="thumb tright">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:DFA_example_multiplies_of_3.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/94/DFA_example_multiplies_of_3.svg/250px-DFA_example_multiplies_of_3.svg.png" width="250" height="106" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/94/DFA_example_multiplies_of_3.svg/375px-DFA_example_multiplies_of_3.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/94/DFA_example_multiplies_of_3.svg/500px-DFA_example_multiplies_of_3.svg.png 2x" data-file-width="1230" data-file-height="523" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:DFA_example_multiplies_of_3.svg" class="internal" title="Enlarge"></a></div>
An example of a deterministic finite automaton that accepts only binary numbers that are multiples of 3. The state <i>S</i><sub>0</sub> is both the start state and an accept state.</div>
</div>
</div>
<p>In <a href="/wiki/Theory_of_computation" title="Theory of computation">theory of computation</a>, a branch of <a href="/wiki/Theoretical_computer_science" title="Theoretical computer science">theoretical computer science</a>, a <b>deterministic finite automaton</b> (<b>DFA</b>)—also known as <a href="/wiki/Finite-state_machine#Acceptors_and_recognizers" title="Finite-state machine"><b>deterministic finite accepter</b> (<b>DFA</b>)</a> and <b>deterministic finite state machine</b>—is a <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state machine</a> that accepts/rejects finite strings of symbols and only produces a unique computation (or run) of the automaton for each input string.<sup id="cite_ref-Hopcroft_2001_1-0" class="reference"><a href="#cite_note-Hopcroft_2001-1">[1]</a></sup> 'Deterministic' refers to the uniqueness of the computation. In search of simplest models to capture the finite state machines, McCulloch and Pitts were among the first researchers to introduce a concept similar to finite automaton in 1943.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[2]</a></sup><sup id="cite_ref-3" class="reference"><a href="#cite_note-3">[3]</a></sup></p>
<p>The figure illustrates a deterministic finite automaton using a <a href="/wiki/State_diagram" title="State diagram">state diagram</a>. In the automaton, there are three states: S<sub>0</sub>, S<sub>1</sub>, and S<sub>2</sub> (denoted graphically by circles). The automaton takes a finite sequence of 0s and 1s as input. For each state, there is a transition arrow leading out to a next state for both 0 and 1. Upon reading a symbol, a DFA jumps <i>deterministically</i> from a state to another by following the transition arrow. For example, if the automaton is currently in state S<sub>0</sub> and current input symbol is 1 then it deterministically jumps to state S<sub>1</sub>. A DFA has a <i>start state</i> (denoted graphically by an arrow coming in from nowhere) where computations begin, and a <a href="/wiki/Set_(mathematics)" title="Set (mathematics)">set</a> of <i>accept states</i> (denoted graphically by a double circle) which help define when a computation is successful.</p>
<p>A DFA is defined as an abstract mathematical concept, but is often implemented in hardware and software for solving various specific problems. For example, a DFA can model software that decides whether or not online user-input such as email addresses are valid.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4">[4]</a></sup> (see: <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state machine</a> for more practical examples).</p>
<p>DFAs recognize exactly the set of <a href="/wiki/Regular_language" title="Regular language">regular languages</a><sup id="cite_ref-Hopcroft_2001_1-1" class="reference"><a href="#cite_note-Hopcroft_2001-1">[1]</a></sup> which are, among other things, useful for doing <a href="/wiki/Lexical_analysis" title="Lexical analysis">lexical analysis</a> and pattern matching. DFAs can be built from <a href="/wiki/Nondeterministic_finite_automata" title="Nondeterministic finite automata" class="mw-redirect">nondeterministic finite automata</a> (NFAs) using the <a href="/wiki/Powerset_construction" title="Powerset construction">powerset construction</a> method.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Formal_definition"><span class="tocnumber">1</span> <span class="toctext">Formal definition</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Complete_and_incomplete_deterministic_finite_automata"><span class="tocnumber">2</span> <span class="toctext">Complete and incomplete deterministic finite automata</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Closure_properties"><span class="tocnumber">4</span> <span class="toctext">Closure properties</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#DFA_as_a_transition_monoid"><span class="tocnumber">5</span> <span class="toctext">DFA as a transition monoid</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Local_automata"><span class="tocnumber">6</span> <span class="toctext">Local automata</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Random_DFA"><span class="tocnumber">7</span> <span class="toctext">Random DFA</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Advantages_and_disadvantages"><span class="tocnumber">8</span> <span class="toctext">Advantages and disadvantages</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Notes"><span class="tocnumber">10</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#External_links"><span class="tocnumber">12</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Formal_definition">Formal definition</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=1" title="Edit section: Formal definition">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A <b>deterministic finite automaton</b> <i>M</i> is a 5-<a href="/wiki/N-tuple" title="N-tuple" class="mw-redirect">tuple</a>, (<i>Q</i>, Σ, δ, <i>q</i><sub><i>0</i></sub>, <i>F</i>), consisting of</p>
<ul>
<li>a finite set of <a href="/wiki/State_(computer_science)" title="State (computer science)">states</a> (<i>Q</i>)</li>
<li>a finite set of input symbols called the <a href="/wiki/Alphabet_(computer_science)" title="Alphabet (computer science)" class="mw-redirect">alphabet</a> (Σ)</li>
<li>a transition <a href="/wiki/Function_(mathematics)" title="Function (mathematics)">function</a> (δ&#160;: <i>Q</i> × Σ → <i>Q</i>)</li>
<li>an initial or <a href="/wiki/Finite_state_machine#Start_state" title="Finite state machine" class="mw-redirect">start state</a> (<i>q</i><sub><i>0</i></sub> ∈ <i>Q</i>)</li>
<li>a set of <a href="/wiki/Finite_state_machine#Accept_.28or_final.29_states" title="Finite state machine" class="mw-redirect">accept states</a> (<i>F</i> ⊆ <i>Q</i>)</li>
</ul>
<p>Let <i>w = a<sub>1</sub>a<sub>2</sub> ... a<sub>n</sub></i> be a string over the alphabet Σ. The automaton <i>M</i> accepts the string <i>w</i> if a sequence of states, <i>r<sub>0</sub>,r<sub>1</sub>, ..., r<sub>n</sub></i>, exists in <i>Q</i> with the following conditions:</p>
<ol>
<li><i>r<sub>0</sub></i> = <i>q</i><sub><i>0</i></sub></li>
<li><i>r<sub>i+1</sub></i> = δ(<i>r<sub>i</sub></i>, <i>a<sub>i+1</sub></i>), for <i>i</i> = <i>0, ..., n−1</i></li>
<li><i>r<sub>n</sub></i> ∈ <i>F</i>.</li>
</ol>
<p>In words, the first condition says that the machine starts in the start state <i>q</i><sub>0</sub>. The second condition says that given each character of string <i>w</i>, the machine will transition from state to state according to the transition function δ. The last condition says that the machine accepts <i>w</i> if the last input of <i>w</i> causes the machine to halt in one of the accepting states. Otherwise, it is said that the automaton <i>rejects</i> the string. The set of strings that <i>M</i> accepts is the <a href="/wiki/Formal_language" title="Formal language">language</a> <i>recognized</i> by <i>M</i> and this language is denoted by <i>L(M)</i>.</p>
<p>A deterministic finite automaton without accept states and without a starting state is known as a <a href="/wiki/Transition_system" title="Transition system">transition system</a> or <a href="/wiki/Semiautomaton" title="Semiautomaton">semiautomaton</a>.</p>
<p>For more comprehensive introduction of the formal definition see <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a>.</p>
<h2><span class="mw-headline" id="Complete_and_incomplete_deterministic_finite_automata">Complete and incomplete deterministic finite automata</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=2" title="Edit section: Complete and incomplete deterministic finite automata">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>According to the above definition, deterministic finite automata are always <i>complete</i>: they define a transition for each state and each input symbol.</p>
<p>While this is the most common definition, some authors use the term deterministic finite automaton for a slightly different notion: an automaton that defines <i>at most</i> one transition for each state and each input symbol; the transition function is allowed to be <a href="/wiki/Partial_function" title="Partial function">partial</a>. When no transition is defined, such an automaton halts.</p>
<h2><span class="mw-headline" id="Example">Example</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The following example is of a DFA <i>M</i>, with a binary alphabet, which requires that the input contains an even number of 0s.</p>
<div class="thumb tright">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:DFAexample.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/DFAexample.svg/250px-DFAexample.svg.png" width="250" height="150" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/DFAexample.svg/375px-DFAexample.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9d/DFAexample.svg/500px-DFAexample.svg.png 2x" data-file-width="500" data-file-height="299" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:DFAexample.svg" class="internal" title="Enlarge"></a></div>
The <a href="/wiki/State_diagram" title="State diagram">state diagram</a> for <i>M</i></div>
</div>
</div>
<p><i>M</i> = (<i>Q</i>, Σ, δ, <i>q<sub>0</sub></i>, <i>F</i>) where</p>
<ul>
<li><i>Q</i> = {<i>S</i><sub>1</sub>, <i>S</i><sub>2</sub>},</li>
<li>Σ = {0, 1},</li>
<li><i>q<sub>0</sub></i> = <i>S</i><sub>1</sub>,</li>
<li><i>F</i> = {<i>S</i><sub>1</sub>}, and</li>
<li>δ is defined by the following <a href="/wiki/State_transition_table" title="State transition table">state transition table</a>:</li>
</ul>
<dl>
<dd>
<table border="1" cellpadding="1" cellspacing="0">
<tr>
<td></td>
<td>
<center><b>0</b></center>
</td>
<td>
<center><b>1</b></center>
</td>
</tr>
<tr>
<td><b><i>S</i><sub>1</sub></b></td>
<td><i>S</i><sub>2</sub></td>
<td><i>S</i><sub>1</sub></td>
</tr>
<tr>
<td><b><i>S</i><sub>2</sub></b></td>
<td><i>S</i><sub>1</sub></td>
<td><i>S</i><sub>2</sub></td>
</tr>
</table>
</dd>
</dl>
<p>The state <i>S</i><sub>1</sub> represents that there has been an even number of 0s in the input so far, while <i>S</i><sub>2</sub> signifies an odd number. A 1 in the input does not change the state of the automaton. When the input ends, the state will show whether the input contained an even number of 0s or not. If the input did contain an even number of 0s, <i>M</i> will finish in state <i>S</i><sub>1</sub>, an accepting state, so the input string will be accepted.</p>
<p>The language recognized by <i>M</i> is the <a href="/wiki/Regular_language" title="Regular language">regular language</a> given by the <a href="/wiki/Regular_expression" title="Regular expression">regular expression</a> (1 + 0 (1*) 0)*, where "*" is the <a href="/wiki/Kleene_star" title="Kleene star">Kleene star</a>, e.g., 1* denotes any non-negative number (possibly zero) of symbols "1".</p>
<h2><span class="mw-headline" id="Closure_properties">Closure properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=4" title="Edit section: Closure properties">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>If DFAs recognize the languages that are obtained by applying an operation on the DFA recognizable languages then DFAs are said to be <a href="/wiki/Closed_under" title="Closed under" class="mw-redirect">closed under</a> the operation. The DFAs are closed under the following operations.</p>
<ul>
<li>Union</li>
<li>Intersection</li>
<li>Concatenation</li>
<li>Negation</li>
<li><a href="/wiki/Kleene_closure" title="Kleene closure" class="mw-redirect">Kleene closure</a></li>
<li>Reversal</li>
<li>Init</li>
<li>Quotient<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2015)">citation needed</span></a></i>]</sup></li>
<li>Substitution<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2015)">citation needed</span></a></i>]</sup></li>
<li>Homomorphism<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2015)">citation needed</span></a></i>]</sup></li>
</ul>
<p>Since DFAs are <a href="/wiki/Powerset_construction" title="Powerset construction">equivalent</a> to <a href="/wiki/Nondeterministic_finite_automaton" title="Nondeterministic finite automaton">nondeterministic finite automata</a> (NFA), these closures may be proved using closure properties of NFA.</p>
<h2><span class="mw-headline" id="DFA_as_a_transition_monoid">DFA as a transition monoid</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=5" title="Edit section: DFA as a transition monoid">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Alternatively a run can be seen as a sequence of compositions of transition function with itself. Given an input symbol <img class="mwe-math-fallback-image-inline tex" alt="a\in\Sigma" src="//upload.wikimedia.org/math/9/b/8/9b850deace6afbd280f361ab3dd16158.png" />, one may write the transition function as <img class="mwe-math-fallback-image-inline tex" alt="\delta_a:Q\rightarrow Q" src="//upload.wikimedia.org/math/f/c/c/fccb226ec073a736f05cce8e80b2ce6b.png" />, using the simple trick of <a href="/wiki/Currying" title="Currying">currying</a>, that is, writing <img class="mwe-math-fallback-image-inline tex" alt="\delta(q,a)=\delta_a(q)" src="//upload.wikimedia.org/math/9/b/c/9bca73e92af9878983eba4f5a742b714.png" /> for all <img class="mwe-math-fallback-image-inline tex" alt="q\in Q" src="//upload.wikimedia.org/math/0/3/a/03ab662b71a6e9ecc0a51e8938a9f26b.png" />. This way, the transition function can be seen in simpler terms: it's just something that "acts" on a state in Q, yielding another state. One may then consider the result of <a href="/wiki/Function_composition" title="Function composition">function composition</a> repeatedly applied to the various functions <img class="mwe-math-fallback-image-inline tex" alt="\delta_a" src="//upload.wikimedia.org/math/b/0/b/b0bb873ddca20ef56f5612fb15c663af.png" />, <img class="mwe-math-fallback-image-inline tex" alt="\delta_b" src="//upload.wikimedia.org/math/9/e/a/9eaf1194810eadc5979276442edf8d18.png" />, and so on. Using this notion we define <img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta:Q \times \Sigma^{\star} \rightarrow Q" src="//upload.wikimedia.org/math/e/8/d/e8db1f1d8dc841c0f9acaae706d35642.png" />. Given a pair of letters <img class="mwe-math-fallback-image-inline tex" alt="a,b\in \Sigma" src="//upload.wikimedia.org/math/3/a/0/3a0185ffdebd50a805920abb925a5595.png" />, one may define a new function <img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta" src="//upload.wikimedia.org/math/4/5/c/45cb4dc7c4aa2942cfa39b42bbd416c8.png" />, by insisting that <img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta_{ab}=\delta_a \circ \delta_b" src="//upload.wikimedia.org/math/b/1/d/b1df7c8998a12423405a02f4b1496c9f.png" />, where <img class="mwe-math-fallback-image-inline tex" alt="\circ" src="//upload.wikimedia.org/math/1/0/c/10c3e97d2a3eda0d182b81d48f231b62.png" /> denotes function composition. Clearly, this process can be recursively continued. So, we have the following recursive definition</p>
<dl>
<dd><img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta ( q, \epsilon ) = q." src="//upload.wikimedia.org/math/6/f/3/6f30d161a4856494552485593cb735c0.png" /> where <img class="mwe-math-fallback-image-inline tex" alt=" \epsilon" src="//upload.wikimedia.org/math/c/5/0/c50b9e82e318d4c163e4b1b060f7daf5.png" /> is empty string and</dd>
<dd><img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta ( q, wa ) = \delta_a(\widehat\delta ( q, w ))." src="//upload.wikimedia.org/math/d/4/1/d418f01795be6e1828aa6f29722035b6.png" /> where <img class="mwe-math-fallback-image-inline tex" alt=" w \in \Sigma ^*, a \in \Sigma " src="//upload.wikimedia.org/math/d/c/d/dcd7f424e665cd67004b6a15ecba5311.png" /> and <img class="mwe-math-fallback-image-inline tex" alt="q \in Q" src="//upload.wikimedia.org/math/0/3/a/03ab662b71a6e9ecc0a51e8938a9f26b.png" />.</dd>
</dl>
<p><img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta" src="//upload.wikimedia.org/math/4/5/c/45cb4dc7c4aa2942cfa39b42bbd416c8.png" /> is defined for all words <img class="mwe-math-fallback-image-inline tex" alt="w\in\Sigma^*" src="//upload.wikimedia.org/math/3/0/c/30cae90d987479cb4438b8bda8501204.png" />. Repeated function composition forms a <a href="/wiki/Monoid" title="Monoid">monoid</a>. For the transition functions, this monoid is known as the <a href="/wiki/Transition_monoid" title="Transition monoid" class="mw-redirect">transition monoid</a>, or sometimes the <i>transformation semigroup</i>. The construction can also be reversed: given a <img class="mwe-math-fallback-image-inline tex" alt="\widehat\delta" src="//upload.wikimedia.org/math/4/5/c/45cb4dc7c4aa2942cfa39b42bbd416c8.png" />, one can reconstruct a <img class="mwe-math-fallback-image-inline tex" alt="\delta" src="//upload.wikimedia.org/math/f/1/0/f10f03c9836c36537d2539196058bfa2.png" />, and so the two descriptions are equivalent.</p>
<h2><span class="mw-headline" id="Local_automata">Local automata</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=6" title="Edit section: Local automata">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A <b>local automaton</b> is a DFA for which all edges with the same label lead to a single vertex. Local automata accept the class of <a href="/wiki/Local_language_(formal_language)" title="Local language (formal language)">local languages</a>, those for which membership of a word in the language is determined by a "sliding window" of length two on the word.<sup id="cite_ref-Law129_5-0" class="reference"><a href="#cite_note-Law129-5">[5]</a></sup><sup id="cite_ref-Sak228_6-0" class="reference"><a href="#cite_note-Sak228-6">[6]</a></sup></p>
<p>A <b>Myhill graph</b> over an alphabet <i>A</i> is a <a href="/wiki/Directed_graph" title="Directed graph">directed graph</a> with <a href="/wiki/Vertex_(graph_theory)" title="Vertex (graph theory)">vertex set</a> <i>A</i> and subsets of vertices labelled "start" and "finish". The language accepted by a Myhill graph is the set of directed paths from a start vertex to a finish vertex: the graph thus acts as an automaton.<sup id="cite_ref-Law129_5-1" class="reference"><a href="#cite_note-Law129-5">[5]</a></sup> The class of languages accepted by Myhill graphs is the class of local languages.<sup id="cite_ref-Law128_7-0" class="reference"><a href="#cite_note-Law128-7">[7]</a></sup></p>
<h2><span class="mw-headline" id="Random_DFA">Random DFA</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=7" title="Edit section: Random DFA">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>When the start state and accept states are ignored, a DFA of <img class="mwe-math-fallback-image-inline tex" alt="n" src="//upload.wikimedia.org/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png" />-states and an alphabet of size <img class="mwe-math-fallback-image-inline tex" alt="k" src="//upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" /> can be seen as a <a href="/wiki/Directed_graph" title="Directed graph">digraph</a> of <img class="mwe-math-fallback-image-inline tex" alt="n" src="//upload.wikimedia.org/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png" /> vertices in which all vertices have <img class="mwe-math-fallback-image-inline tex" alt="k" src="//upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" /> out-arcs labeled <img class="mwe-math-fallback-image-inline tex" alt="1,\ldots, k" src="//upload.wikimedia.org/math/8/3/0/830301d45136eccff8ade7407347e133.png" /> (a <img class="mwe-math-fallback-image-inline tex" alt="k" src="//upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" />-out digraph). It is known that when <img class="mwe-math-fallback-image-inline tex" alt="k \ge 2" src="//upload.wikimedia.org/math/5/c/a/5cadcec26f332ce3d7a52bf62c4c1ad5.png" /> is a fixed integer, with high probability, the largest <a href="/wiki/Strongly_connected_component" title="Strongly connected component">strongly connected component</a> (SCC) in such a <img class="mwe-math-fallback-image-inline tex" alt="k" src="//upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" />-out digraph chosen uniformly at random is of linear size and it can be reached by all vertices.<sup id="cite_ref-Grusho_8-0" class="reference"><a href="#cite_note-Grusho-8">[8]</a></sup> It has also been proven that if <img class="mwe-math-fallback-image-inline tex" alt="k" src="//upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" /> is allowed to increase as <img class="mwe-math-fallback-image-inline tex" alt="n" src="//upload.wikimedia.org/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png" /> increases, then the whole digraph has a phase transition for strong connectivity similar to <a href="/wiki/Erd%C5%91s%E2%80%93R%C3%A9nyi_model" title="Erdős–Rényi model">Erdős–Rényi model</a> for connectivity.<sup id="cite_ref-Cai_9-0" class="reference"><a href="#cite_note-Cai-9">[9]</a></sup></p>
<p>In a random DFA, the maximum number of vertices reachable from one vertex is very close to the number of vertices in the largest <a href="/wiki/Strongly_connected_component" title="Strongly connected component">SCC</a> with high probably.<sup id="cite_ref-Grusho_8-1" class="reference"><a href="#cite_note-Grusho-8">[8]</a></sup><sup id="cite_ref-10" class="reference"><a href="#cite_note-10">[10]</a></sup> This is also true for the largest <a href="/wiki/Glossary_of_graph_theory#Subgraphs" title="Glossary of graph theory">induced sub-digraph</a> of minimum in-degree one, which can be seen as a directed version of <a href="/wiki/Degeneracy_(graph_theory)#k-Cores" title="Degeneracy (graph theory)"><img class="mwe-math-fallback-image-inline tex" alt="1" src="//upload.wikimedia.org/math/c/4/c/c4ca4238a0b923820dcc509a6f75849b.png" />-core</a>.<sup id="cite_ref-Cai_9-1" class="reference"><a href="#cite_note-Cai-9">[9]</a></sup></p>
<h2><span class="mw-headline" id="Advantages_and_disadvantages">Advantages and disadvantages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=8" title="Edit section: Advantages and disadvantages">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>DFAs are one of the most practical models of computation, since there is a trivial linear time, constant-space, <a href="/wiki/Online_algorithm" title="Online algorithm">online algorithm</a> to simulate a DFA on a stream of input. Also, there are efficient algorithms to find a DFA recognizing:</p>
<ul>
<li>the complement of the language recognized by a given DFA.</li>
<li>the union/intersection of the languages recognized by two given DFAs.</li>
</ul>
<p>Because DFAs can be reduced to a <i>canonical form</i> (<a href="/wiki/Dfa_minimization" title="Dfa minimization" class="mw-redirect">minimal DFAs</a>), there are also efficient algorithms to determine:</p>
<ul>
<li>whether a DFA accepts any strings</li>
<li>whether a DFA accepts all strings</li>
<li>whether two DFAs recognize the same language</li>
<li>the DFA with a minimum number of states for a particular regular language</li>
</ul>
<p>DFAs are equivalent in computing power to <a href="/wiki/Nondeterministic_finite_automata" title="Nondeterministic finite automata" class="mw-redirect">nondeterministic finite automata</a> (NFAs). This is because, firstly any DFA is also an NFA, so an NFA can do what a DFA can do. Also, given an NFA, using the <a href="/wiki/Powerset_construction" title="Powerset construction">powerset construction</a> one can build a DFA that recognizes the same language as the NFA, although the DFA could have exponentially larger number of states than the NFA.<sup id="cite_ref-Sak105_11-0" class="reference"><a href="#cite_note-Sak105-11">[11]</a></sup><sup id="cite_ref-Law63_12-0" class="reference"><a href="#cite_note-Law63-12">[12]</a></sup></p>
<p>On the other hand, finite state automata are of strictly limited power in the languages they can recognize; many simple languages, including any problem that requires more than constant space to solve, cannot be recognized by a DFA. The classic example of a simply described language that no DFA can recognize is bracket or <a href="/wiki/Dyck_language" title="Dyck language">Dyck language</a>, i.e., the language that consists of properly paired brackets such as word "(()())". Intuitively, no DFA can recognize the Dyck language because DFAs are not capable of counting: a DFA-like automaton needs to have a state to represent any possible number of "currently open" parentheses, meaning it would need an unbounded number of states. Another simpler example is the language consisting of strings of the form <i>a<sup>n</sup>b<sup>n</sup> for some finite but arbitrary number of</i> a<i>'s, followed by an equal number of</i> b<i>'s.<sup id="cite_ref-Law46_13-0" class="reference"><a href="#cite_note-Law46-13">[13]</a></sup></i></p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=9" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/Acyclic_deterministic_finite_automata" title="Acyclic deterministic finite automata" class="mw-redirect">Acyclic deterministic finite automata</a></li>
<li><a href="/wiki/DFA_minimization" title="DFA minimization">DFA minimization</a></li>
<li><a href="/wiki/Monadic_second-order_logic" title="Monadic second-order logic" class="mw-redirect">Monadic second-order logic</a></li>
<li><a href="/wiki/Quantum_finite_automata" title="Quantum finite automata">Quantum finite automata</a></li>
<li><a href="/wiki/Read-only_right_moving_Turing_Machines" title="Read-only right moving Turing Machines" class="mw-redirect">Read-only right moving Turing Machines</a></li>
<li><a href="/wiki/Separating_words_problem" title="Separating words problem">Separating words problem</a></li>
<li><a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a></li>
<li><a href="/wiki/Two-way_deterministic_finite_automaton" title="Two-way deterministic finite automaton">Two-way deterministic finite automaton</a></li>
</ul>
<h2><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=10" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ol class="references">
<li id="cite_note-Hopcroft_2001-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-Hopcroft_2001_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Hopcroft_2001_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><a href="#HMU">Hopcroft 2001</a>:</span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><a href="#MP43">McCulloch and Pitts (1943)</a>:</span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><a href="#RS59">Rabin and Scott (1959)</a>:</span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><cite id="CITEREFGouda" class="citation">Gouda, Prabhakar, <i>Application of Finite automata</i></cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.aufirst=Prabhakar&amp;rft.aulast=Gouda&amp;rft.btitle=Application+of+Finite+automata&amp;rft.genre=book&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment"><code style="color:inherit; border:inherit; padding:inherit;">|access-date=</code> requires <code style="color:inherit; border:inherit; padding:inherit;">|url=</code> (<a href="/wiki/Help:CS1_errors#accessdate_missing_url" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-Law129-5"><span class="mw-cite-backlink">^ <a href="#cite_ref-Law129_5-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Law129_5-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">Lawson (2004) p.129</span></li>
<li id="cite_note-Sak228-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-Sak228_6-0">^</a></b></span> <span class="reference-text">Sakarovitch (2009) p.228</span></li>
<li id="cite_note-Law128-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-Law128_7-0">^</a></b></span> <span class="reference-text">Lawson (2004) p.128</span></li>
<li id="cite_note-Grusho-8"><span class="mw-cite-backlink">^ <a href="#cite_ref-Grusho_8-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Grusho_8-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite id="Grusho1973" class="citation journal">Grusho, A. A. (1973). "Limit distributions of certain characteristics of random automaton graphs". <i>Mathematical Notes of the Academy of Sciences of the USSR</i> <b>4</b>: 633–637. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1007%2FBF01095785">10.1007/BF01095785</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.atitle=Limit+distributions+of+certain+characteristics+of+random+automaton+graphs&amp;rft.aufirst=A.+A.&amp;rft.aulast=Grusho&amp;rft.date=1973&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1007%2FBF01095785&amp;rft.jtitle=Mathematical+Notes+of+the+Academy+of+Sciences+of+the+USSR&amp;rft.pages=633-637&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=4" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Cai-9"><span class="mw-cite-backlink">^ <a href="#cite_ref-Cai_9-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Cai_9-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><cite class="citation arxiv">Cai, X.S.; Devroye, L. "The graph structure of a deterministic automaton chosen at random: full version". <a href="/wiki/ArXiv" title="ArXiv">arXiv</a>:<a rel="nofollow" class="external text" href="//arxiv.org/abs/1504.06238">1504.06238</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.atitle=The+graph+structure+of+a+deterministic+automaton+chosen+at+random%3A+full+version&amp;rft.au=Devroye%2C+L.&amp;rft.aufirst=X.S.&amp;rft.aulast=Cai&amp;rft.genre=preprint&amp;rft_id=info%3Aarxiv%2F1504.06238&amp;rft.jtitle=arXiv&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><cite class="citation journal">Carayol, Arnaud; Nicaud,, Cyril (2012). <a rel="nofollow" class="external text" href="https://hal.archives-ouvertes.fr/hal-00678213">"Distribution of the number of accessible states in a random deterministic automaton"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.atitle=Distribution+of+the+number+of+accessible+states+in+a+random+deterministic+automaton&amp;rft.aufirst=Arnaud&amp;rft.aulast=Carayol&amp;rft.au=Nicaud%2C%2C+Cyril&amp;rft.date=2012&amp;rft.genre=article&amp;rft_id=https%3A%2F%2Fhal.archives-ouvertes.fr%2Fhal-00678213&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Sak105-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-Sak105_11-0">^</a></b></span> <span class="reference-text">Sakarovitch (2009) p.105</span></li>
<li id="cite_note-Law63-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-Law63_12-0">^</a></b></span> <span class="reference-text">Lawson (2004) p.63</span></li>
<li id="cite_note-Law46-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-Law46_13-0">^</a></b></span> <span class="reference-text">Lawson (2004) p.46</span></li>
</ol>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=11" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><cite id="HMU" class="citation book"><a href="/wiki/John_Hopcroft" title="John Hopcroft">Hopcroft, John E.</a>; <a href="/wiki/Rajeev_Motwani" title="Rajeev Motwani">Motwani, Rajeev</a>; <a href="/wiki/Jeffrey_Ullman" title="Jeffrey Ullman">Ullman, Jeffrey D.</a> (2001). <a rel="nofollow" class="external text" href="http://www.pearsonhighered.com/educator/product/Introduction-to-Automata-Theory-Languages-and-Computation/9780201441246.page"><i>Introduction to Automata Theory, Languages, and Computation</i></a> (2 ed.). <a href="/wiki/Addison_Wesley" title="Addison Wesley" class="mw-redirect">Addison Wesley</a>. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-201-44124-1" title="Special:BookSources/0-201-44124-1">0-201-44124-1</a><span class="reference-accessdate">. Retrieved <span class="nowrap">19 November</span> 2012</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.aufirst=John+E.&amp;rft.aulast=Hopcroft&amp;rft.au=Motwani%2C+Rajeev&amp;rft.au=Ullman%2C+Jeffrey+D.&amp;rft.btitle=Introduction+to+Automata+Theory%2C+Languages%2C+and+Computation&amp;rft.date=2001&amp;rft.edition=2&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.pearsonhighered.com%2Feducator%2Fproduct%2FIntroduction-to-Automata-Theory-Languages-and-Computation%2F9780201441246.page&amp;rft.isbn=0-201-44124-1&amp;rft.pub=Addison+Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><cite class="citation book">Lawson, Mark V. (2004). <i>Finite automata</i>. Chapman and Hall/CRC. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/1-58488-255-7" title="Special:BookSources/1-58488-255-7">1-58488-255-7</a>. <a href="/wiki/Zentralblatt_MATH" title="Zentralblatt MATH">Zbl</a>&#160;<a rel="nofollow" class="external text" href="//zbmath.org/?format=complete&amp;q=an:1086.68074">1086.68074</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.aufirst=Mark+V.&amp;rft.aulast=Lawson&amp;rft.btitle=Finite+automata&amp;rft.date=2004&amp;rft.genre=book&amp;rft_id=%2F%2Fzbmath.org%2F%3Fformat%3Dcomplete%26q%3Dan%3A1086.68074&amp;rft.isbn=1-58488-255-7&amp;rft.pub=Chapman+and+Hall%2FCRC&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><cite id="MP43" class="citation journal">McCulloch, W. S.; Pitts, E. (1943). "A logical calculus of the ideas imminent in nervous activity". <i>Bulletin of Mathematical Biophysics</i>: 541–544.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.atitle=A+logical+calculus+of+the+ideas+imminent+in+nervous+activity&amp;rft.aufirst=W.+S.&amp;rft.aulast=McCulloch&amp;rft.au=Pitts%2C+E.&amp;rft.date=1943&amp;rft.genre=article&amp;rft.jtitle=Bulletin+of+Mathematical+Biophysics&amp;rft.pages=541-544&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></li>
</ul>
<ul>
<li><cite id="RS59" class="citation journal">Rabin, M. O.; Scott, D. (1959). "Finite automata and their decision problems.". <i>IBM J. Res. Develop.</i>: 114–125.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.atitle=Finite+automata+and+their+decision+problems.&amp;rft.aufirst=M.+O.&amp;rft.aulast=Rabin&amp;rft.au=Scott%2C+D.&amp;rft.date=1959&amp;rft.genre=article&amp;rft.jtitle=IBM+J.+Res.+Develop.&amp;rft.pages=114-125&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><cite class="citation book">Sakarovitch, Jacques (2009). <i>Elements of automata theory</i>. Translated from the French by Reuben Thomas. Cambridge: <a href="/wiki/Cambridge_University_Press" title="Cambridge University Press">Cambridge University Press</a>. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0-521-84425-3" title="Special:BookSources/978-0-521-84425-3">978-0-521-84425-3</a>. <a href="/wiki/Zentralblatt_MATH" title="Zentralblatt MATH">Zbl</a>&#160;<a rel="nofollow" class="external text" href="//zbmath.org/?format=complete&amp;q=an:1188.68177">1188.68177</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.aufirst=Jacques&amp;rft.aulast=Sakarovitch&amp;rft.btitle=Elements+of+automata+theory&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=%2F%2Fzbmath.org%2F%3Fformat%3Dcomplete%26q%3Dan%3A1188.68177&amp;rft.isbn=978-0-521-84425-3&amp;rft.place=Cambridge&amp;rft.pub=Cambridge+University+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><cite class="citation book">Sipser, Michael (1997). <i>Introduction to the Theory of Computation</i>. Boston: PWS. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/0-534-94728-X" title="Special:BookSources/0-534-94728-X">0-534-94728-X</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADeterministic+finite+automaton&amp;rft.aufirst=Michael&amp;rft.aulast=Sipser&amp;rft.btitle=Introduction+to+the+Theory+of+Computation&amp;rft.date=1997&amp;rft.genre=book&amp;rft.isbn=0-534-94728-X&amp;rft.place=Boston&amp;rft.pub=PWS&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span>. Section 1.1: Finite Automata, pp.&#160;31–47. Subsection "Decidable Problems Concerning Regular Languages" of section 4.1: Decidable Languages, pp.&#160;152–155.4.4 DFA can accept only regular language</li>
</ul>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit&amp;section=12" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="http://home.arcor.de/kai.w1986/dfasimulator/">DFA Simulator - an open source graphical editor and simulator of DFA</a></li>
</ul>
<table class="navbox" style="border-spacing:0">
<tr>
<td style="padding:2px">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Formal_languages_and_grammars" title="Template:Formal languages and grammars"><abbr title="View this template" style=";;background:none transparent;border:none;">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Formal_languages_and_grammars" title="Template talk:Formal languages and grammars"><abbr title="Discuss this template" style=";;background:none transparent;border:none;">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Formal_languages_and_grammars&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;">e</abbr></a></li>
</ul>
</div>
<div style="font-size:114%"><a href="/wiki/Automata_theory" title="Automata theory">Automata theory</a>: <a href="/wiki/Formal_language" title="Formal language">formal languages</a> and <a href="/wiki/Formal_grammar" title="Formal grammar">formal grammars</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-odd plainlist" style="width:100%;padding:0px;background:transparent;color:inherit;">
<div style="padding:0px;">
<table class="navbox-columns-table" style="border-spacing: 0px; text-align:left;width:100%;">
<tr>
<td class="navbox-abovebelow" colspan="1" style="font-weight:bold;"><a href="/wiki/Chomsky_hierarchy" title="Chomsky hierarchy">Chomsky hierarchy</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Formal_grammar" title="Formal grammar">Grammars</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Formal_language" title="Formal language">Languages</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Abstract_machine" title="Abstract machine">Abstract machines</a></td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr style="vertical-align:top;">
<td style="padding:0px;;;text-align: center;;width:10em;">
<div>
<ul>
<li>Type-0</li>
<li>—</li>
<li>Type-1</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>Type-2</li>
<li>—</li>
<li>—</li>
<li>Type-3</li>
<li>—</li>
<li>—</li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Unrestricted_grammar" title="Unrestricted grammar">Unrestricted</a></li>
<li>(no common name)</li>
<li><a href="/wiki/Context-sensitive_grammar" title="Context-sensitive grammar">Context-sensitive</a></li>
<li><span style="white-space:nowrap;">Positive <a href="/wiki/Range_concatenation_grammars" title="Range concatenation grammars">range concatenation</a></span></li>
<li><a href="/wiki/Indexed_grammar" title="Indexed grammar">Indexed</a></li>
<li>—</li>
<li><a href="/wiki/Linear_context-free_rewriting_system" title="Linear context-free rewriting system" class="mw-redirect">Linear context-free rewriting systems</a></li>
<li><a href="/wiki/Tree-adjoining_grammar" title="Tree-adjoining grammar">Tree-adjoining</a></li>
<li><a href="/wiki/Context-free_grammar" title="Context-free grammar">Context-free</a></li>
<li><a href="/wiki/Deterministic_context-free_grammar" title="Deterministic context-free grammar">Deterministic context-free</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Regular_grammar" title="Regular grammar">Regular</a></li>
<li>—</li>
<li><a href="/wiki/Non-recursive_grammar" title="Non-recursive grammar" class="mw-redirect">Non-recursive</a></li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Recursively_enumerable_language" title="Recursively enumerable language">Recursively enumerable</a></li>
<li><a href="/wiki/Recursive_language" title="Recursive language">Decidable</a></li>
<li><a href="/wiki/Context-sensitive_language" title="Context-sensitive language">Context-sensitive</a></li>
<li><span style="white-space:nowrap;">Positive <a href="/wiki/Range_concatenation_language" title="Range concatenation language" class="mw-redirect">range concatenation</a><sup>*</sup></span></li>
<li><a href="/wiki/Indexed_language" title="Indexed language">Indexed</a><sup>*</sup></li>
<li>—</li>
<li><a href="/wiki/Linear_context-free_rewriting_language" title="Linear context-free rewriting language" class="mw-redirect">Linear context-free rewriting language</a></li>
<li><a href="/wiki/Tree-adjoining_grammar" title="Tree-adjoining grammar">Tree-adjoining</a></li>
<li><a href="/wiki/Context-free_language" title="Context-free language">Context-free</a></li>
<li><a href="/wiki/Deterministic_context-free_language" title="Deterministic context-free language">Deterministic context-free</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Regular_language" title="Regular language">Regular</a></li>
<li><a href="/wiki/Star-free_language" title="Star-free language">Star-free</a></li>
<li><a href="/wiki/Finite_language" title="Finite language" class="mw-redirect">Finite</a></li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a></li>
<li><a href="/wiki/Machine_that_always_halts" title="Machine that always halts">Decider</a></li>
<li><a href="/wiki/Linear_bounded_automaton" title="Linear bounded automaton">Linear-bounded</a></li>
<li><a href="/wiki/PTIME" title="PTIME" class="mw-redirect">PTIME</a> Turing Machine</li>
<li><a href="/wiki/Nested_stack_automaton" title="Nested stack automaton">Nested stack</a></li>
<li><a href="/wiki/Thread_automaton" title="Thread automaton">Thread automaton</a></li>
<li>—</li>
<li><a href="/wiki/Embedded_pushdown_automaton" title="Embedded pushdown automaton">Embedded pushdown</a></li>
<li><a href="/wiki/Pushdown_automaton" title="Pushdown automaton">Nondeterministic pushdown</a></li>
<li><a href="/wiki/Deterministic_pushdown_automaton" title="Deterministic pushdown automaton">Deterministic pushdown</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Finite-state_machine" title="Finite-state machine">Finite</a></li>
<li><a href="/wiki/Aperiodic_finite_state_automaton" title="Aperiodic finite state automaton">Counter-free (with aperiodic finite monoid)</a></li>
<li><a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">Acyclic finite</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div><span style="white-space:nowrap;">Each category of languages, except those marked by a <sup>*</sup>, is a <a href="/wiki/Proper_subset" title="Proper subset" class="mw-redirect">proper subset</a> of the category directly above it.</span> <span style="white-space:nowrap;">Any language in each category is generated by a grammar and by an automaton in the category in the same line.</span></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1019
Cached time: 20160326054527
Cache expiry: 2592000
Dynamic content: false
CPU time usage: 0.344 seconds
Real time usage: 0.473 seconds
Preprocessor visited node count: 1747/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 44389/2097152 bytes
Template argument size: 6173/2097152 bytes
Highest expansion depth: 12/40
Expensive parser function count: 3/500
Lua time usage: 0.127/10.000 seconds
Lua memory usage: 3.22 MB/50 MB
Number of Wikibase entities loaded: 0-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%  404.204      1 - -total
 14.73%   59.542      3 - Template:Citation_needed
 12.63%   51.044      3 - Template:Fix
 12.13%   49.022      1 - Template:Citation
 11.73%   47.418      1 - Template:Use_dmy_dates
 11.05%   44.683      6 - Template:Category_handler
  8.19%   33.123      1 - Template:Formal_languages_and_grammars
  7.76%   31.364      4 - Template:Cite_journal
  7.38%   29.841      1 - Template:Navbox_with_columns
  7.23%   29.205      4 - Template:Cite_book
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:653404-0!*!0!!en!4!*!math=0 and timestamp 20160326054527 and revision id 710254958
 -->
<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Deterministic_finite_automaton&amp;oldid=710254958">https://en.wikipedia.org/w/index.php?title=Deterministic_finite_automaton&amp;oldid=710254958</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Finite_automata" title="Category:Finite automata">Finite automata</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Pages_using_citations_with_accessdate_and_no_URL" title="Category:Pages using citations with accessdate and no URL">Pages using citations with accessdate and no URL</a></li><li><a href="/wiki/Category:Use_dmy_dates_from_July_2013" title="Category:Use dmy dates from July 2013">Use dmy dates from July 2013</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_January_2015" title="Category:Articles with unsourced statements from January 2015">Articles with unsourced statements from January 2015</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>

			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Deterministic+finite+automaton&amp;type=signup" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Deterministic+finite+automaton" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
															<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Deterministic_finite_automaton"  title="View the content page [c]" accesskey="c">Article</a></span></li>
															<li  id="ca-talk"><span><a href="/wiki/Talk:Deterministic_finite_automaton"  title="Discussion about the content page [t]" accesskey="t" rel="discussion">Talk</a></span></li>
													</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span><a href="#"></a>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
															<li id="ca-view" class="selected"><span><a href="/wiki/Deterministic_finite_automaton" >Read</a></span></li>
															<li id="ca-edit"><span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=edit"  title="Edit this page [e]" accesskey="e">Edit</a></span></li>
															<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
													</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/w/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
			<h3 id='p-navigation-label'>Navigation</h3>

			<div class="body">
									<ul>
						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
			<h3 id='p-interaction-label'>Interaction</h3>

			<div class="body">
									<ul>
						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
			<h3 id='p-tb-label'>Tools</h3>

			<div class="body">
									<ul>
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Deterministic_finite_automaton" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Deterministic_finite_automaton" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Deterministic_finite_automaton&amp;oldid=710254958" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Deterministic_finite_automaton&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="//www.wikidata.org/wiki/Q837528" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Deterministic_finite_automaton&amp;id=710254958" title="Information on how to cite this page">Cite this page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
			<h3 id='p-coll-print_export-label'>Print/export</h3>

			<div class="body">
									<ul>
						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Deterministic+finite+automaton">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Deterministic+finite+automaton&amp;returnto=Deterministic+finite+automaton&amp;oldid=710254958&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Deterministic_finite_automaton&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
			<h3 id='p-lang-label'>Languages</h3>

			<div class="body">
									<ul>
						<li class="interlanguage-link interwiki-ar"><a href="//ar.wikipedia.org/wiki/%D8%A3%D8%AA%D9%85%D8%AA%D8%A9_%D9%85%D8%AD%D8%AF%D9%88%D8%AF%D8%A9_%D9%82%D8%B7%D8%B9%D9%8A%D8%A9" title="أتمتة محدودة قطعية – Arabic" lang="ar" hreflang="ar">العربية</a></li><li class="interlanguage-link interwiki-bs"><a href="//bs.wikipedia.org/wiki/Deterministi%C4%8Dki_kona%C4%8Dni_automat" title="Deterministički konačni automat – Bosnian" lang="bs" hreflang="bs">Bosanski</a></li><li class="interlanguage-link interwiki-ca"><a href="//ca.wikipedia.org/wiki/Aut%C3%B2mat_finit_determinista" title="Autòmat finit determinista – Catalan" lang="ca" hreflang="ca">Català</a></li><li class="interlanguage-link interwiki-de"><a href="//de.wikipedia.org/wiki/Deterministischer_endlicher_Automat" title="Deterministischer endlicher Automat – German" lang="de" hreflang="de">Deutsch</a></li><li class="interlanguage-link interwiki-el"><a href="//el.wikipedia.org/wiki/%CE%9D%CF%84%CE%B5%CF%84%CE%B5%CF%81%CE%BC%CE%B9%CE%BD%CE%B9%CF%83%CF%84%CE%B9%CE%BA%CF%8C_%CF%80%CE%B5%CF%80%CE%B5%CF%81%CE%B1%CF%83%CE%BC%CE%AD%CE%BD%CE%BF_%CE%B1%CF%85%CF%84%CF%8C%CE%BC%CE%B1%CF%84%CE%BF" title="Ντετερμινιστικό πεπερασμένο αυτόματο – Greek" lang="el" hreflang="el">Ελληνικά</a></li><li class="interlanguage-link interwiki-es"><a href="//es.wikipedia.org/wiki/Aut%C3%B3mata_finito_determinista" title="Autómata finito determinista – Spanish" lang="es" hreflang="es">Español</a></li><li class="interlanguage-link interwiki-fa"><a href="//fa.wikipedia.org/wiki/%D9%85%D8%A7%D8%B4%DB%8C%D9%86_%D8%AA%D8%B9%DB%8C%DB%8C%D9%86%E2%80%8C%D9%BE%D8%B0%DB%8C%D8%B1_%D8%AD%D8%A7%D9%84%D8%A7%D8%AA_%D9%85%D8%AA%D9%86%D8%A7%D9%87%DB%8C" title="ماشین تعیین‌پذیر حالات متناهی – Persian" lang="fa" hreflang="fa">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="//fr.wikipedia.org/wiki/Automate_fini_d%C3%A9terministe" title="Automate fini déterministe – French" lang="fr" hreflang="fr">Français</a></li><li class="interlanguage-link interwiki-hr"><a href="//hr.wikipedia.org/wiki/Deterministi%C4%8Dki_kona%C4%8Dni_automat" title="Deterministički konačni automat – Croatian" lang="hr" hreflang="hr">Hrvatski</a></li><li class="interlanguage-link interwiki-it"><a href="//it.wikipedia.org/wiki/Automa_a_stati_finiti_deterministico" title="Automa a stati finiti deterministico – Italian" lang="it" hreflang="it">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="//he.wikipedia.org/wiki/%D7%90%D7%95%D7%98%D7%95%D7%9E%D7%98_%D7%A1%D7%95%D7%A4%D7%99_%D7%93%D7%98%D7%A8%D7%9E%D7%99%D7%A0%D7%99%D7%A1%D7%98%D7%99" title="אוטומט סופי דטרמיניסטי – Hebrew" lang="he" hreflang="he">עברית</a></li><li class="interlanguage-link interwiki-lv"><a href="//lv.wikipedia.org/wiki/Gal%C4%ABgs_determin%C4%93ts_autom%C4%81ts" title="Galīgs determinēts automāts – Latvian" lang="lv" hreflang="lv">Latviešu</a></li><li class="interlanguage-link interwiki-hu"><a href="//hu.wikipedia.org/wiki/Determinisztikus_v%C3%A9ges_%C3%A1llapot%C3%BA_g%C3%A9p" title="Determinisztikus véges állapotú gép – Hungarian" lang="hu" hreflang="hu">Magyar</a></li><li class="interlanguage-link interwiki-ja"><a href="//ja.wikipedia.org/wiki/%E6%B1%BA%E5%AE%9A%E6%80%A7%E6%9C%89%E9%99%90%E3%82%AA%E3%83%BC%E3%83%88%E3%83%9E%E3%83%88%E3%83%B3" title="決定性有限オートマトン – Japanese" lang="ja" hreflang="ja">日本語</a></li><li class="interlanguage-link interwiki-pl"><a href="//pl.wikipedia.org/wiki/Deterministyczny_automat_sko%C5%84czony" title="Deterministyczny automat skończony – Polish" lang="pl" hreflang="pl">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="//pt.wikipedia.org/wiki/Aut%C3%B4mato_finito_determin%C3%ADstico" title="Autômato finito determinístico – Portuguese" lang="pt" hreflang="pt">Português</a></li><li class="interlanguage-link interwiki-sr"><a href="//sr.wikipedia.org/wiki/%D0%94%D0%B5%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D0%B8%D1%87%D0%BA%D0%B8_%D0%BA%D0%BE%D0%BD%D0%B0%D1%87%D0%BD%D0%B8_%D0%B0%D1%83%D1%82%D0%BE%D0%BC%D0%B0%D1%82" title="Детерминистички коначни аутомат – Serbian" lang="sr" hreflang="sr">Српски / srpski</a></li><li class="interlanguage-link interwiki-sh"><a href="//sh.wikipedia.org/wiki/Deterministi%C4%8Dki_kona%C4%8Dni_automat" title="Deterministički konačni automat – Serbo-Croatian" lang="sh" hreflang="sh">Srpskohrvatski / српскохрватски</a></li><li class="interlanguage-link interwiki-tr"><a href="//tr.wikipedia.org/wiki/Deterministik_sonlu_durum_makinesi" title="Deterministik sonlu durum makinesi – Turkish" lang="tr" hreflang="tr">Türkçe</a></li><li class="interlanguage-link interwiki-uk"><a href="//uk.wikipedia.org/wiki/%D0%94%D0%B5%D1%82%D0%B5%D1%80%D0%BC%D1%96%D0%BD%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B9_%D1%81%D0%BA%D1%96%D0%BD%D1%87%D0%B5%D0%BD%D0%BD%D0%B8%D0%B9_%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82" title="Детермінований скінченний автомат – Ukrainian" lang="uk" hreflang="uk">Українська</a></li><li class="interlanguage-link interwiki-zh"><a href="//zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA" title="确定有限状态自动机 – Chinese" lang="zh" hreflang="zh">中文</a></li><li class="uls-p-lang-dummy"><a href="#"></a></li>					</ul>
				<div class='after-portlet after-portlet-lang'><span class="wb-langlinks-edit wb-langlinks-link"><a href="//www.wikidata.org/wiki/Q837528#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>
		</div>
				</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 15 March 2016, at 21:58.</li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="//wikimediafoundation.org/wiki/Privacy_policy" title="wmf:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-cookiestatement"><a href="//wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Deterministic_finite_automaton&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
											<li id="footer-copyrightico">
							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>
											<li id="footer-poweredbyico">
							<a href="//www.mediawiki.org/"><img src="/w/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/w/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /w/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>
									</ul>
						<div style="clear:both"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.loader.state({"ext.globalCssJs.site":"ready","ext.globalCssJs.user":"ready","user":"ready","user.groups":"ready"});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.eventLogging.subscriber","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.switcher","ext.gadget.featured-articles-links","mmv.bootstrap.autostart","ext.visualEditor.targetLoader","ext.wikimediaEvents","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage"]);});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":74,"wgHostname":"mw1220"});});</script>
	</body>
</html>

NFA : http://en.wikipedia.org/wiki/Nondeterministic_finite_state_machine
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8"/>
<title>Nondeterministic finite automaton - Wikipedia, the free encyclopedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Nondeterministic_finite_automaton","wgTitle":"Nondeterministic finite automaton","wgCurRevisionId":711536016,"wgRevisionId":711536016,"wgArticleId":653406,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles to be merged from October 2015","All articles to be merged","Finite automata"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Nondeterministic_finite_automaton","wgRelevantArticleId":653406,"wgRequestId":"433e7bfdff3590246f0ed763","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Nondeterministic_finite_state_machine","wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSAcceptLanguageList":[],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgInternalRedirectTargetUrl":"/wiki/Nondeterministic_finite_automaton","wgCentralAuthMobileDomain":false,"wgWikibaseItemId":"Q617295","wgVisualEditorToolbarScrollOffset":0});mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function ( $, jQuery ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["mediawiki.action.view.redirect","mediawiki.page.startup","mediawiki.legacy.wikibits","ext.centralauth.centralautologin","mmv.head","ext.visualEditor.desktopArticleTarget.init","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","mw.MediaWikiPlayer.loader","mw.PopUpMediaTransform","ext.centralNotice.bannerController","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cfeatured-articles-links%2CrefToolbar%2Cswitcher%2Cteahouse%7Cext.math.styles%7Cext.tmh.thumbnail.styles%7Cext.uls.nojs%7Cext.visualEditor.desktopArticleTarget.noscript%7Cext.wikimediaBadges%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.raggett%2CsectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"/>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="generator" content="MediaWiki 1.27.0-wmf.19"/>
<meta name="referrer" content="origin-when-cross-origin"/>
<link rel="alternate" href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Nondeterministic_finite_automaton"/>
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit"/>
<link rel="edit" title="Edit this page" href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit"/>
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png"/>
<link rel="shortcut icon" href="/static/favicon/wikipedia.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikipedia (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd"/>
<link rel="copyright" href="//creativecommons.org/licenses/by-sa/3.0/"/>
<link rel="canonical" href="https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton"/>
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Nondeterministic_finite_automaton skin-vector action-view">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>

							<div id="siteNotice"><!-- CentralNotice --></div>
						<div class="mw-indicators">
</div>
			<h1 id="firstHeading" class="firstHeading" lang="en">Nondeterministic finite automaton</h1>
									<div id="bodyContent" class="mw-body-content">
									<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"><span class="mw-redirectedfrom">  (Redirected from <a href="/w/index.php?title=Nondeterministic_finite_state_machine&amp;redirect=no" title="Nondeterministic finite state machine">Nondeterministic finite state machine</a>)</span></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><table class="metadata plainlinks ambox ambox-move" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/50px-Mergefrom.svg.png" width="50" height="20" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/75px-Mergefrom.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/100px-Mergefrom.svg.png 2x" data-file-width="50" data-file-height="20" /></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">It has been suggested that <i><a href="/wiki/Nondeterministic_finite_automaton_with_%CE%B5-moves" title="Nondeterministic finite automaton with ε-moves">Nondeterministic finite automaton with ε-moves</a></i> be <a href="/wiki/Wikipedia:Merging" title="Wikipedia:Merging">merged</a> into this article. (<a href="/wiki/Talk:Nondeterministic_finite_automaton#Proposed_merge_with_Nondeterministic_finite_automaton_with_.CE.B5-moves" title="Talk:Nondeterministic finite automaton">Discuss</a>) <small><i>Proposed since October 2015.</i></small></span></td>
</tr>
</table>
<p>In <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a>, a <a href="/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">finite state machine</a> is called a <a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">deterministic finite automaton</a> (DFA), if</p>
<ul>
<li>each of its transitions is uniquely determined by its source state and input symbol, and</li>
<li>reading an input symbol is required for each state transition.</li>
</ul>
<p>A <b>nondeterministic finite automaton</b> (NFA), or nondeterministic finite state machine, does not need to obey these restrictions. In particular, every DFA is also an NFA.</p>
<p>Using the <a href="/wiki/Subset_construction_algorithm" title="Subset construction algorithm" class="mw-redirect">subset construction algorithm</a>, each NFA can be translated to an equivalent DFA, i.e. a DFA recognizing the same <a href="/wiki/Formal_language" title="Formal language">formal language</a>.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1">[1]</a></sup> Like DFAs, NFAs only recognize <a href="/wiki/Regular_languages" title="Regular languages" class="mw-redirect">regular languages</a>. Sometimes the term <b>NFA</b> is used in a narrower sense, meaning an automaton that properly violates an above restriction, i.e. that is <i>not</i> a DFA.</p>
<p>NFAs were introduced in 1959 by <a href="/wiki/Michael_O._Rabin" title="Michael O. Rabin">Michael O. Rabin</a> and <a href="/wiki/Dana_Scott" title="Dana Scott">Dana Scott</a>,<sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[2]</a></sup> who also showed their equivalence to DFAs. NFAs are used in the implementation of <a href="/wiki/Regular_expression" title="Regular expression">regular expressions</a>: <a href="/wiki/Thompson%27s_construction" title="Thompson's construction">Thompson's construction</a> is an algorithm for compiling a regular expression to an NFA that can efficiently perform pattern matching on strings.</p>
<p>NFAs have been generalized in multiple ways, e.g., <a href="/wiki/Nondeterministic_finite_automaton_with_%CE%B5-moves" title="Nondeterministic finite automaton with ε-moves">nondeterministic finite automaton with ε-moves</a>, <a href="/wiki/Finite_state_transducer" title="Finite state transducer">finite state transducers</a>, <a href="/wiki/Pushdown_automaton" title="Pushdown automaton">pushdown automata</a>, <a href="/wiki/Alternating_finite_automaton" title="Alternating finite automaton">alternating automata</a>, <a href="/wiki/%CE%A9-automaton" title="Ω-automaton">ω-automata</a>, and <a href="/wiki/Probabilistic_automata" title="Probabilistic automata" class="mw-redirect">probabilistic automata</a>.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Informal_introduction"><span class="tocnumber">1</span> <span class="toctext">Informal introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Formal_definition"><span class="tocnumber">2</span> <span class="toctext">Formal definition</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Example"><span class="tocnumber">3</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Variations_of_NFA"><span class="tocnumber">4</span> <span class="toctext">Variations of NFA</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Equivalence_to_DFA"><span class="tocnumber">5</span> <span class="toctext">Equivalence to DFA</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Closure_properties"><span class="tocnumber">6</span> <span class="toctext">Closure properties</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Properties"><span class="tocnumber">7</span> <span class="toctext">Properties</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Implementation"><span class="tocnumber">8</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Application_of_NFA"><span class="tocnumber">9</span> <span class="toctext">Application of NFA</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#Notes"><span class="tocnumber">11</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#References"><span class="tocnumber">12</span> <span class="toctext">References</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Informal_introduction">Informal introduction</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=1" title="Edit section: Informal introduction">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>An NFA, similar to a <a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">DFA</a>, consumes a string of input symbols. For each input symbol, it transitions to a new state until all input symbols have been consumed. Unlike a DFA, it is non-deterministic, i.e., for some state and input symbol, the next state may be nothing or one or two or more possible states. Thus, in the formal definition, the next state is an element of the <a href="/wiki/Power_set" title="Power set">power set</a> of the states, which is a set of states to be considered at once. The notion of accepting an input is similar to that for the DFA. When the last input symbol is consumed, the NFA accepts if and only if there is <i>some</i> set of transitions that will take it to an accepting state. Equivalently, it rejects, if, no matter what transitions are applied, it would not end in an accepting state.</p>
<h2><span class="mw-headline" id="Formal_definition">Formal definition</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=2" title="Edit section: Formal definition">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>An <i>NFA</i> is represented formally by a <a href="/wiki/N-tuple" title="N-tuple" class="mw-redirect">5-tuple</a>, (<i>Q</i>, Σ, Δ, <i>q<sub>0</sub></i>, <i>F</i>), consisting of</p>
<ul>
<li>a finite <a href="/wiki/Set_(mathematics)" title="Set (mathematics)">set</a> of states <i>Q</i></li>
<li>a finite set of <a href="/wiki/Input_symbol" title="Input symbol" class="mw-redirect">input symbols</a> Σ</li>
<li>a transition function Δ&#160;: <i>Q</i> × Σ → <i>P(Q)</i>.</li>
<li>an <i>initial</i> (or <i>start</i>) state <i>q</i><sub>0</sub> ∈ <i>Q</i></li>
<li>a set of states <i>F</i> distinguished as <i>accepting</i> (or <i>final</i>) <i>states</i> <i>F</i> ⊆ <i>Q</i>.</li>
</ul>
<p>Here, <i>P</i>(<i>Q</i>) denotes the <a href="/wiki/Power_set" title="Power set">power set</a> of <i>Q</i>. Let <i>w = a<sub>1</sub>a<sub>2</sub> ... a<sub>n</sub></i> be a word over the alphabet Σ. The automaton <i>M</i> accepts the word <i>w</i> if a sequence of states, <i>r<sub>0</sub>,r<sub>1</sub>, ..., r<sub>n</sub></i>, exists in <i>Q</i> with the following conditions:</p>
<ol>
<li><i>r<sub>0</sub></i> = <i>q</i><sub><i>0</i></sub></li>
<li><i>r<sub>i+1</sub></i> ∈ Δ(<i>r<sub>i</sub></i>, <i>a<sub>i+1</sub></i>), for <i>i</i> = <i>0, ..., n−1</i></li>
<li><i>r<sub>n</sub></i> ∈ <i>F</i>.</li>
</ol>
<p>In words, the first condition says that the machine starts in the start state <i>q</i><sub>0</sub>. The second condition says that given each character of string <i>w</i>, the machine will transition from state to state according to the transition function Δ. The last condition says that the machine accepts <i>w</i> if the last input of <i>w</i> causes the machine to halt in one of the accepting states. In order for <i>w</i> being accepted by <i>M</i> it is not required that every state sequence ends in an accepting state, it is sufficient if one does. Otherwise, i.e. if it is impossible at all to get from <i>q</i><sub>0</sub> to a state from <i>F</i> by following <i>w</i>, it is said that the automaton <i>rejects</i> the string. The set of strings <i>M</i> accepts is the <a href="/wiki/Formal_language" title="Formal language">language</a> <i>recognized</i> by <i>M</i> and this language is denoted by <i>L(M)</i>.</p>
<p>We can also define <i>L(M)</i> in terms of Δ*: Q × Σ* → <i>P</i>(<i>Q</i>) such that:</p>
<ol>
<li>Δ*(<i>r</i>, ε)= {<i>r</i>} where ε is the empty string, and</li>
<li>If <i>x</i> ∈ Σ*, <i>a</i> ∈ Σ, and Δ*(<i>r</i>, x)={r<sub>1</sub>, r<sub>2</sub>,..., r<sub>k</sub>} then Δ*(<i>r</i>, <i>xa</i>)= Δ(r<sub>1</sub>, a)∪...∪Δ(r<sub>k</sub>, a).</li>
</ol>
<p>Now L(M) = {w | Δ*(q<sub>0</sub>, w) ∩ <i>F</i> ≠ ∅}.</p>
<p>Note that there is a <i>single initial state</i>, which is not necessary. Sometimes, NFAs are defined with a set of initial states. There is an easy <a href="/wiki/Automata_construction" title="Automata construction">construction</a> that translates a NFA with multiple initial states to a NFA with single initial state, which provides a convenient notation.</p>
<p>For a more elementary introduction of the formal definition see <a href="/wiki/Automata_theory" title="Automata theory">automata theory</a>.</p>
<h2><span class="mw-headline" id="Example">Example</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=3" title="Edit section: Example">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:252px;"><a href="/wiki/File:NFASimpleExample.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f9/NFASimpleExample.svg/250px-NFASimpleExample.svg.png" width="250" height="137" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f9/NFASimpleExample.svg/375px-NFASimpleExample.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f9/NFASimpleExample.svg/500px-NFASimpleExample.svg.png 2x" data-file-width="423" data-file-height="231" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:NFASimpleExample.svg" class="internal" title="Enlarge"></a></div>
The <a href="/wiki/State_diagram" title="State diagram">state diagram</a> for <i>M</i>. It is not deterministic since in state <i>p</i> reading a 1 can lead to <i>p</i> or to <i>q</i>.</div>
</div>
</div>
<p>Let <i>M</i> be a NFA, with a binary alphabet, that determines if the input ends with a 1.</p>
<p>In formal notation, let <i>M</i> = ({<i>p</i>, <i>q</i>}, {0, 1}, Δ, <i>p</i>, {<i>q</i>}) where the transition function Δ can be defined by this <a href="/wiki/State_transition_table" title="State transition table">state transition table</a>:</p>
<table border="1" cellpadding="1" align="center">
<tr>
<td></td>
<td>
<center><b>0</b></center>
</td>
<td>
<center><b>1</b></center>
</td>
</tr>
<tr>
<td>
<center><i>p</i></center>
</td>
<td>
<center>{<i>p</i>}</center>
</td>
<td>
<center>{<i>p</i>,<i>q</i>}</center>
</td>
</tr>
<tr>
<td>
<center><i>q</i></center>
</td>
<td>
<center>∅</center>
</td>
<td>
<center>∅</center>
</td>
</tr>
</table>
<p>Note that Δ(<i>p</i>,1) has more than one state therefore <i>M</i> is nondeterministic. The language of <i>M</i> can be described by the <a href="/wiki/Regular_language" title="Regular language">regular language</a> given by the <a href="/wiki/Regular_expression" title="Regular expression">regular expression</a> (0|1)*1. Some possible state sequences for the input word "1011" are:</p>
<table class="wikitable">
<tr>
<th>Input:</th>
<th></th>
<th>1</th>
<th></th>
<th>0</th>
<th></th>
<th>1</th>
<th></th>
<th>1</th>
<th></th>
</tr>
<tr>
<td>State sequence 1:</td>
<td><i>p</i></td>
<td></td>
<td><i>q</i></td>
<td></td>
<td><b>?</b></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>State sequence 2:</td>
<td><i>p</i></td>
<td></td>
<td><i>p</i></td>
<td></td>
<td><i>p</i></td>
<td></td>
<td><i>q</i></td>
<td></td>
<td><b>?</b></td>
</tr>
<tr>
<td>State sequence 3:</td>
<td><i>p</i></td>
<td></td>
<td><i>p</i></td>
<td></td>
<td><i>p</i></td>
<td></td>
<td><i>p</i></td>
<td></td>
<td><i>q</i></td>
</tr>
</table>
<p>The word is accepted by <i>M</i> since state sequence 3 satisfies the above definition; it doesn't matter that sequences 1 and 2 fail to do so. In contrast, the word "10" is rejected by <i>M</i>, since there is no way to reach the only accepting state, <i>q</i>, by reading the final 0 symbol or by an ε-transition.</p>
<h2><span class="mw-headline" id="Variations_of_NFA">Variations of NFA</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=4" title="Edit section: Variations of NFA">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">Deterministic finite automaton</a> (DFA): In this automaton, for each state and alphabet, the transition function has exactly one state.</li>
<li><a href="/wiki/Nondeterministic_finite_automaton_with_%CE%B5-moves" title="Nondeterministic finite automaton with ε-moves">Nondeterministic finite automaton with ε-moves</a>(NFA-ε): This automaton replaces the transition function with the one that allows the <a href="/wiki/Empty_string" title="Empty string">empty string</a> ε as a possible input, so the transition function is defined as Δ&#160;: <i>Q</i> × (Σ ∪{ε}) → <i>P</i>(<i>Q</i>).</li>
</ul>
<h2><span class="mw-headline" id="Equivalence_to_DFA">Equivalence to DFA</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=5" title="Edit section: Equivalence to DFA">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>For each NFA, there is a DFA such that both recognize the same <a href="/wiki/Formal_language" title="Formal language">formal language</a>. The DFA can be <a href="/wiki/Automata_construction" title="Automata construction">constructed</a> using the <a href="/wiki/Powerset_construction" title="Powerset construction">powerset construction</a>. It is important in theory because it establishes that NFAs, despite their additional flexibility, are unable to recognize any language that cannot be recognized by some DFA. It is also important in practice for converting easier-to-construct NFAs into more efficiently executable DFAs. However, if the NFA has <i>n</i> states, the resulting DFA may have up to 2<sup><i>n</i></sup> states, an exponentially larger number, which sometimes makes the construction impractical for large NFAs.</p>
<h2><span class="mw-headline" id="Closure_properties">Closure properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=6" title="Edit section: Closure properties">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;"><a href="/wiki/File:Thompson-or.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/25/Thompson-or.svg/220px-Thompson-or.svg.png" width="220" height="147" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/25/Thompson-or.svg/330px-Thompson-or.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/25/Thompson-or.svg/440px-Thompson-or.svg.png 2x" data-file-width="453" data-file-height="303" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="/wiki/File:Thompson-or.svg" class="internal" title="Enlarge"></a></div>
Composed NFA accepting the union of the languages of some given NFAs <span style="color:#800000"><i>N</i>(<i>s</i>)</span> and <span style="color:#008000"><i>N</i>(<i>t</i>)</span>. For an input word <i>w</i> in the language union, the composed automaton follows an ε-transition from <i>q</i> to the start state (left colored circle) of an appropriate subautomaton — <span style="color:#800000"><i>N</i>(<i>s</i>)</span> or <span style="color:#008000"><i>N</i>(<i>t</i>)</span> — which, by following <i>w</i>, may reach an accepting state (right colored circle); from there, state <i>f</i> can be reached by another ε-transition. Due to the ε-transitions, the composed NFA is properly nondeterministic even if both <span style="color:#800000"><i>N</i>(<i>s</i>)</span> and <span style="color:#008000"><i>N</i>(<i>t</i>)</span> were DFAs; vice versa, constructing a DFA for the union language (even of two DFAs) is much more complicated.</div>
</div>
</div>
<p>NFAs are said to be <a href="/wiki/Closed_under" title="Closed under" class="mw-redirect">closed under</a> a (<a href="/wiki/Binary_operator" title="Binary operator" class="mw-redirect">binary</a>/<a href="/wiki/Unary_operator" title="Unary operator" class="mw-redirect">unary</a>) operator if NFAs recognize the languages that are obtained by applying the operation on the NFA recognizable languages. The NFAs are closed under the following operations.</p>
<ul>
<li>Union (cf. picture)</li>
<li>Intersection</li>
<li>Concatenation</li>
<li>Negation</li>
<li><a href="/wiki/Kleene_closure" title="Kleene closure" class="mw-redirect">Kleene closure</a></li>
</ul>
<p>Since NFAs are equivalent to <a href="/wiki/Nondeterministic_finite_automaton_with_%CE%B5-moves" title="Nondeterministic finite automaton with ε-moves">nondeterministic finite automaton with ε-moves</a>(NFA-ε), the above closures are proved using closure properties of NFA-ε. The above closure properties imply that NFAs only recognize <a href="/wiki/Regular_languages" title="Regular languages" class="mw-redirect">regular languages</a>.</p>
<p>NFAs can be constructed from any <a href="/wiki/Regular_expression" title="Regular expression">regular expression</a> using <a href="/wiki/Thompson%27s_construction_algorithm" title="Thompson's construction algorithm" class="mw-redirect">Thompson's construction algorithm</a>.</p>
<h2><span class="mw-headline" id="Properties">Properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=7" title="Edit section: Properties">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The machine starts in the specified initial state and reads in a string of symbols from its <a href="/wiki/Alphabet_(computer_science)" title="Alphabet (computer science)" class="mw-redirect">alphabet</a>. The automaton uses the <a href="/wiki/State_transition_function" title="State transition function" class="mw-redirect">state transition function</a> Δ to determine the next state using the current state, and the symbol just read or the empty string. However, "the next state of an NFA depends not only on the current input event, but also on an arbitrary number of subsequent input events. Until these subsequent events occur it is not possible to determine which state the machine is in".<sup id="cite_ref-3" class="reference"><a href="#cite_note-3">[3]</a></sup> If, when the automaton has finished reading, it is in an accepting state, the NFA is said to accept the string, otherwise it is said to reject the string.</p>
<p>The set of all strings accepted by an NFA is the language the NFA accepts. This language is a <a href="/wiki/Regular_language" title="Regular language">regular language</a>.</p>
<p>For every NFA a <a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">deterministic finite automaton</a> (DFA) can be found that accepts the same language. Therefore it is possible to convert an existing NFA into a DFA for the purpose of implementing a (perhaps) simpler machine. This can be performed using the <a href="/wiki/Powerset_construction" title="Powerset construction">powerset construction</a>, which may lead to an exponential rise in the number of necessary states. For a formal proof of the powerset construction, please see the <a href="/wiki/Powerset_construction" title="Powerset construction">Powerset construction</a> article.</p>
<h2><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=8" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>There are many ways to implement a NFA:</p>
<ul>
<li>Convert to the equivalent DFA. In some cases this may cause exponential blowup in the number of states.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4">[4]</a></sup></li>
<li>Keep a <a href="/wiki/Set_data_structure" title="Set data structure" class="mw-redirect">set data structure</a> of all states which the NFA might currently be in. On the consumption of an input symbol, <a href="/wiki/Set_union" title="Set union" class="mw-redirect">unite</a> the results of the transition function applied to all current states to get the set of next states; if ε-moves are allowed, include all states reachable by such a move (ε-closure). Each step requires at most <i>s</i><sup>2</sup> computations, where <i>s</i> is the number of states of the NFA. On the consumption of the last input symbol, if one of the current states is a final state, the machine accepts the string. A string of length <i>n</i> can be processed in time <a href="/wiki/Big_O_notation#Formal_definition" title="Big O notation"><i>O</i></a>(ns<sup>2</sup>),<sup id="cite_ref-5" class="reference"><a href="#cite_note-5">[5]</a></sup> and space <i>O</i>(<i>s</i>).</li>
<li>Create multiple copies. For each n way decision, the NFA creates up to <img class="mwe-math-fallback-image-inline tex" alt="n-1" src="//upload.wikimedia.org/math/a/4/3/a438673491daae8148eae77373b6a467.png" /> copies of the machine. Each will enter a separate state. If, upon consuming the last input symbol, at least one copy of the NFA is in the accepting state, the NFA will accept. (This, too, requires linear storage with respect to the number of NFA states, as there can be one machine for every NFA state.)</li>
<li>Explicitly propagate tokens through the transition structure of the NFA and match whenever a token reaches the final state. This is sometimes useful when the NFA should encode additional context about the events that triggered the transition. (For an implementation that uses this technique to keep track of object references have a look at Tracematches.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6">[6]</a></sup>)</li>
</ul>
<h2><span class="mw-headline" id="Application_of_NFA">Application of NFA</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=9" title="Edit section: Application of NFA">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>NFAs and DFAs are equivalent in that if a language is recognized by an NFA, it is also recognized by a DFA and vice versa. The establishment of such equivalence is important and useful. It is useful because constructing an NFA to recognize a given language is sometimes much easier than constructing a DFA for that language. It is important because NFAs can be used to reduce the complexity of the mathematical work required to establish many important properties in the <a href="/wiki/Theory_of_computation" title="Theory of computation">theory of computation</a>. For example, it is much easier to prove <a href="/wiki/Regular_languages#Closure_properties" title="Regular languages" class="mw-redirect">closure properties</a> of <a href="/wiki/Regular_language" title="Regular language">regular languages</a> using NFAs than DFAs.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=10" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="/wiki/Deterministic_finite_automaton" title="Deterministic finite automaton">Deterministic finite automaton</a></li>
<li><a href="/wiki/Pushdown_automaton" title="Pushdown automaton">Pushdown automaton</a></li>
<li><a href="/wiki/Turing_Machine" title="Turing Machine" class="mw-redirect">Turing Machine</a></li>
</ul>
<h2><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=11" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><cite class="citation book">Martin, John (2010). <i>Introduction to Languages and the Theory of Computation</i>. McGraw Hill. p.&#160;108. <a href="/wiki/International_Standard_Book_Number" title="International Standard Book Number">ISBN</a>&#160;<a href="/wiki/Special:BookSources/978-0071289429" title="Special:BookSources/978-0071289429">978-0071289429</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ANondeterministic+finite+automaton&amp;rft.aufirst=John&amp;rft.aulast=Martin&amp;rft.btitle=Introduction+to+Languages+and+the+Theory+of+Computation&amp;rft.date=2010&amp;rft.genre=book&amp;rft.isbn=978-0071289429&amp;rft.pages=108&amp;rft.pub=McGraw+Hill&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><cite class="citation journal">Rabin, M. O.; Scott, D. (April 1959). <a rel="nofollow" class="external text" href="http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=5392601">"Finite Automata and Their Decision Problems"</a> <span style="font-size:85%;">(PDF, IEEE Xplore access required)</span>. <i>IBM Journal of Research and Development</i> <b>3</b> (2): 114–125. <a href="/wiki/Digital_object_identifier" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="//dx.doi.org/10.1147%2Frd.32.0114">10.1147/rd.32.0114</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2007-03-15</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ANondeterministic+finite+automaton&amp;rft.atitle=Finite+Automata+and+Their+Decision+Problems&amp;rft.aufirst=M.+O.&amp;rft.aulast=Rabin&amp;rft.au=Scott%2C+D.&amp;rft.date=1959-04&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fieeexplore.ieee.org%2Fxpl%2Ffreeabs_all.jsp%3Farnumber%3D5392601&amp;rft_id=info%3Adoi%2F10.1147%2Frd.32.0114&amp;rft.issue=2&amp;rft.jtitle=IBM+Journal+of+Research+and+Development&amp;rft.pages=114-125&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=3" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">FOLDOC Free Online Dictionary of Computing, <i><a rel="nofollow" class="external text" href="http://foldoc.org/nfa">Finite State Machine</a></i></span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://cseweb.ucsd.edu/~ccalabro/essays/fsa.pdf">http://cseweb.ucsd.edu/~ccalabro/essays/fsa.pdf</a></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation book">John E. Hopcroft and Rajeev Motwani and Jeffrey D. Ullman (2003). <i>Introduction to Automata Theory, Languages, and Computation</i>. Upper Saddle River/NJ: Addison Wesley.</cite><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ANondeterministic+finite+automaton&amp;rft.au=John+E.+Hopcroft+and+Rajeev+Motwani+and+Jeffrey+D.+Ullman&amp;rft.btitle=Introduction+to+Automata+Theory%2C+Languages%2C+and+Computation&amp;rft.date=2003&amp;rft.genre=book&amp;rft.place=Upper+Saddle+River%2FNJ&amp;rft.pub=Addison+Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> Here: sect.4.3.3 <i>Testing Membership in a Regular Language</i>, p.153</span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text">Allan, C., Avgustinov, P., Christensen, A. S., Hendren, L., Kuzins, S., Lhoták, O., de Moor, O., Sereni, D., Sittampalam, G., and Tibble, J. 2005. <a rel="nofollow" class="external text" href="http://abc.comlab.ox.ac.uk/papers#oopsla2005">Adding trace matching with free variables to AspectJ</a>. In Proceedings of the 20th Annual ACM SIGPLAN Conference on Object Oriented Programming, Systems, Languages, and Applications (San Diego, CA, USA, October 16–20, 2005). OOPSLA '05. ACM, New York, NY, 345-364.</span></li>
</ol>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit&amp;section=12" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li>M. O. Rabin and D. Scott, "Finite Automata and their Decision Problems", <i>IBM Journal of Research and Development</i>, <b>3</b>:2 (1959) pp.&#160;115–125.</li>
<li>Michael Sipser, <i>Introduction to the Theory of Computation</i>. PWS, Boston. 1997. <a href="/wiki/Special:BookSources/053494728X" class="internal mw-magiclink-isbn">ISBN 0-534-94728-X</a>. <i>(see section 1.2: Nondeterminism, pp.47–63.)</i></li>
<li>John E. Hopcroft and Jeffrey D. Ullman, <i><a href="/wiki/Introduction_to_Automata_Theory,_Languages,_and_Computation" title="Introduction to Automata Theory, Languages, and Computation">Introduction to Automata Theory, Languages, and Computation</a></i>, Addison-Wesley Publishing, Reading Massachusetts, 1979. <a href="/wiki/Special:BookSources/020102988X" class="internal mw-magiclink-isbn">ISBN 0-201-02988-X</a>. <i>(See chapter 2.)</i></li>
</ul>
<p><br /></p>
<table class="navbox" style="border-spacing:0">
<tr>
<td style="padding:2px">
<table class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="/wiki/Template:Formal_languages_and_grammars" title="Template:Formal languages and grammars"><abbr title="View this template" style=";;background:none transparent;border:none;">v</abbr></a></li>
<li class="nv-talk"><a href="/wiki/Template_talk:Formal_languages_and_grammars" title="Template talk:Formal languages and grammars"><abbr title="Discuss this template" style=";;background:none transparent;border:none;">t</abbr></a></li>
<li class="nv-edit"><a class="external text" href="//en.wikipedia.org/w/index.php?title=Template:Formal_languages_and_grammars&amp;action=edit"><abbr title="Edit this template" style=";;background:none transparent;border:none;">e</abbr></a></li>
</ul>
</div>
<div style="font-size:114%"><a href="/wiki/Automata_theory" title="Automata theory">Automata theory</a>: <a href="/wiki/Formal_language" title="Formal language">formal languages</a> and <a href="/wiki/Formal_grammar" title="Formal grammar">formal grammars</a></div>
</th>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-odd plainlist" style="width:100%;padding:0px;background:transparent;color:inherit;">
<div style="padding:0px;">
<table class="navbox-columns-table" style="border-spacing: 0px; text-align:left;width:100%;">
<tr>
<td class="navbox-abovebelow" colspan="1" style="font-weight:bold;"><a href="/wiki/Chomsky_hierarchy" title="Chomsky hierarchy">Chomsky hierarchy</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Formal_grammar" title="Formal grammar">Grammars</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Formal_language" title="Formal language">Languages</a></td>
<td class="navbox-abovebelow" colspan="1" style="border-left:2px solid #fdfdfd;font-weight:bold;"><a href="/wiki/Abstract_machine" title="Abstract machine">Abstract machines</a></td>
</tr>
<tr style="height:2px;">
<td></td>
</tr>
<tr style="vertical-align:top;">
<td style="padding:0px;;;text-align: center;;width:10em;">
<div>
<ul>
<li>Type-0</li>
<li>—</li>
<li>Type-1</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>—</li>
<li>Type-2</li>
<li>—</li>
<li>—</li>
<li>Type-3</li>
<li>—</li>
<li>—</li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Unrestricted_grammar" title="Unrestricted grammar">Unrestricted</a></li>
<li>(no common name)</li>
<li><a href="/wiki/Context-sensitive_grammar" title="Context-sensitive grammar">Context-sensitive</a></li>
<li><span style="white-space:nowrap;">Positive <a href="/wiki/Range_concatenation_grammars" title="Range concatenation grammars">range concatenation</a></span></li>
<li><a href="/wiki/Indexed_grammar" title="Indexed grammar">Indexed</a></li>
<li>—</li>
<li><a href="/wiki/Linear_context-free_rewriting_system" title="Linear context-free rewriting system" class="mw-redirect">Linear context-free rewriting systems</a></li>
<li><a href="/wiki/Tree-adjoining_grammar" title="Tree-adjoining grammar">Tree-adjoining</a></li>
<li><a href="/wiki/Context-free_grammar" title="Context-free grammar">Context-free</a></li>
<li><a href="/wiki/Deterministic_context-free_grammar" title="Deterministic context-free grammar">Deterministic context-free</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Regular_grammar" title="Regular grammar">Regular</a></li>
<li>—</li>
<li><a href="/wiki/Non-recursive_grammar" title="Non-recursive grammar" class="mw-redirect">Non-recursive</a></li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Recursively_enumerable_language" title="Recursively enumerable language">Recursively enumerable</a></li>
<li><a href="/wiki/Recursive_language" title="Recursive language">Decidable</a></li>
<li><a href="/wiki/Context-sensitive_language" title="Context-sensitive language">Context-sensitive</a></li>
<li><span style="white-space:nowrap;">Positive <a href="/wiki/Range_concatenation_language" title="Range concatenation language" class="mw-redirect">range concatenation</a><sup>*</sup></span></li>
<li><a href="/wiki/Indexed_language" title="Indexed language">Indexed</a><sup>*</sup></li>
<li>—</li>
<li><a href="/wiki/Linear_context-free_rewriting_language" title="Linear context-free rewriting language" class="mw-redirect">Linear context-free rewriting language</a></li>
<li><a href="/wiki/Tree-adjoining_grammar" title="Tree-adjoining grammar">Tree-adjoining</a></li>
<li><a href="/wiki/Context-free_language" title="Context-free language">Context-free</a></li>
<li><a href="/wiki/Deterministic_context-free_language" title="Deterministic context-free language">Deterministic context-free</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Regular_language" title="Regular language">Regular</a></li>
<li><a href="/wiki/Star-free_language" title="Star-free language">Star-free</a></li>
<li><a href="/wiki/Finite_language" title="Finite language" class="mw-redirect">Finite</a></li>
</ul>
</div>
</td>
<td style="border-left:2px solid #fdfdfd;padding:0px;;;;width:10em;">
<div>
<ul>
<li><a href="/wiki/Turing_machine" title="Turing machine">Turing machine</a></li>
<li><a href="/wiki/Machine_that_always_halts" title="Machine that always halts">Decider</a></li>
<li><a href="/wiki/Linear_bounded_automaton" title="Linear bounded automaton">Linear-bounded</a></li>
<li><a href="/wiki/PTIME" title="PTIME" class="mw-redirect">PTIME</a> Turing Machine</li>
<li><a href="/wiki/Nested_stack_automaton" title="Nested stack automaton">Nested stack</a></li>
<li><a href="/wiki/Thread_automaton" title="Thread automaton">Thread automaton</a></li>
<li>—</li>
<li><a href="/wiki/Embedded_pushdown_automaton" title="Embedded pushdown automaton">Embedded pushdown</a></li>
<li><a href="/wiki/Pushdown_automaton" title="Pushdown automaton">Nondeterministic pushdown</a></li>
<li><a href="/wiki/Deterministic_pushdown_automaton" title="Deterministic pushdown automaton">Deterministic pushdown</a></li>
<li><a href="/wiki/Nested_word" title="Nested word">Visibly pushdown</a></li>
<li><a href="/wiki/Finite-state_machine" title="Finite-state machine">Finite</a></li>
<li><a href="/wiki/Aperiodic_finite_state_automaton" title="Aperiodic finite state automaton">Counter-free (with aperiodic finite monoid)</a></li>
<li><a href="/wiki/Deterministic_acyclic_finite_state_automaton" title="Deterministic acyclic finite state automaton">Acyclic finite</a></li>
</ul>
</div>
</td>
</tr>
</table>
</div>
</td>
</tr>
<tr style="height:2px">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div><span style="white-space:nowrap;">Each category of languages, except those marked by a <sup>*</sup>, is a <a href="/wiki/Proper_subset" title="Proper subset" class="mw-redirect">proper subset</a> of the category directly above it.</span> <span style="white-space:nowrap;">Any language in each category is generated by a grammar and by an automaton in the category in the same line.</span></div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1220
Cached time: 20160326154314
Cache expiry: 2592000
Dynamic content: false
CPU time usage: 0.177 seconds
Real time usage: 0.236 seconds
Preprocessor visited node count: 977/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 30290/2097152 bytes
Template argument size: 5016/2097152 bytes
Highest expansion depth: 12/40
Expensive parser function count: 1/500
Lua time usage: 0.054/10.000 seconds
Lua memory usage: 2.14 MB/50 MB
Number of Wikibase entities loaded: 0-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%  168.614      1 - -total
 46.06%   77.663      1 - Template:Merge_from
 25.04%   42.223      1 - Template:Mbox
 23.14%   39.024      2 - Template:Cite_book
 14.82%   24.994      1 - Template:Formal_languages_and_grammars
 13.13%   22.134      1 - Template:Navbox_with_columns
  8.64%   14.575      1 - Template:Navbox
  8.35%   14.083      1 - Template:DMC
  4.81%    8.105      1 - Template:FULLROOTPAGENAME
  4.14%    6.976      1 - Template:Cite_journal
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:653406-0!*!0!!en!4!*!math=0 and timestamp 20160326154314 and revision id 711536016
 -->
<noscript><img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Nondeterministic_finite_automaton&amp;oldid=711536016">https://en.wikipedia.org/w/index.php?title=Nondeterministic_finite_automaton&amp;oldid=711536016</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Finite_automata" title="Category:Finite automata">Finite automata</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Articles_to_be_merged_from_October_2015" title="Category:Articles to be merged from October 2015">Articles to be merged from October 2015</a></li><li><a href="/wiki/Category:All_articles_to_be_merged" title="Category:All articles to be merged">All articles to be merged</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>

			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Talk</a></li><li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Nondeterministic+finite+automaton&amp;type=signup" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Nondeterministic+finite+automaton" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
															<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/Nondeterministic_finite_automaton"  title="View the content page [c]" accesskey="c">Article</a></span></li>
															<li  id="ca-talk"><span><a href="/wiki/Talk:Nondeterministic_finite_automaton"  title="Discussion about the content page [t]" accesskey="t" rel="discussion">Talk</a></span></li>
													</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<h3 id="p-variants-label">
							<span>Variants</span><a href="#"></a>
						</h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
															<li id="ca-view" class="selected"><span><a href="/wiki/Nondeterministic_finite_automaton" >Read</a></span></li>
															<li id="ca-edit"><span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=edit"  title="Edit this page [e]" accesskey="e">Edit</a></span></li>
															<li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
													</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>

						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>

						<form action="/w/index.php" id="searchform">
							<div id="simpleSearch">
							<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
			<h3 id='p-navigation-label'>Navigation</h3>

			<div class="body">
									<ul>
						<li id="n-mainpage-description"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
			<h3 id='p-interaction-label'>Interaction</h3>

			<div class="body">
									<ul>
						<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
			<h3 id='p-tb-label'>Tools</h3>

			<div class="body">
									<ul>
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Nondeterministic_finite_automaton" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Nondeterministic_finite_automaton" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;oldid=711536016" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a href="//www.wikidata.org/wiki/Q617295" title="Link to connected data repository item [g]" accesskey="g">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Nondeterministic_finite_automaton&amp;id=711536016" title="Information on how to cite this page">Cite this page</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
			<h3 id='p-coll-print_export-label'>Print/export</h3>

			<div class="body">
									<ul>
						<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Nondeterministic+finite+automaton">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Nondeterministic+finite+automaton&amp;returnto=Nondeterministic+finite+automaton&amp;oldid=711536016&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a href="/w/index.php?title=Nondeterministic_finite_automaton&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-wikibase-otherprojects' aria-labelledby='p-wikibase-otherprojects-label'>
			<h3 id='p-wikibase-otherprojects-label'>In other projects</h3>

			<div class="body">
									<ul>
						<li class="wb-otherproject-link wb-otherproject-commons"><a href="https://commons.wikimedia.org/wiki/Category:Finite_state_machine" hreflang="en">Wikimedia Commons</a></li>					</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
			<h3 id='p-lang-label'>Languages</h3>

			<div class="body">
									<ul>
						<li class="interlanguage-link interwiki-ar"><a href="//ar.wikipedia.org/wiki/%D8%A2%D9%84%D8%A9_%D9%85%D8%AD%D8%AF%D9%88%D8%AF%D8%A9_%D8%A7%D9%84%D8%AD%D8%A7%D9%84%D8%A7%D8%AA_%D8%BA%D9%8A%D8%B1_%D9%82%D8%B7%D8%B9%D9%8A%D8%A9" title="آلة محدودة الحالات غير قطعية – Arabic" lang="ar" hreflang="ar">العربية</a></li><li class="interlanguage-link interwiki-bs"><a href="//bs.wikipedia.org/wiki/Nedeterministi%C4%8Dki_kona%C4%8Dni_automat" title="Nedeterministički konačni automat – Bosnian" lang="bs" hreflang="bs">Bosanski</a></li><li class="interlanguage-link interwiki-ca"><a href="//ca.wikipedia.org/wiki/Aut%C3%B2mat_finit_no_determinista" title="Autòmat finit no determinista – Catalan" lang="ca" hreflang="ca">Català</a></li><li class="interlanguage-link interwiki-de"><a href="//de.wikipedia.org/wiki/Nichtdeterministischer_endlicher_Automat" title="Nichtdeterministischer endlicher Automat – German" lang="de" hreflang="de">Deutsch</a></li><li class="interlanguage-link interwiki-el"><a href="//el.wikipedia.org/wiki/%CE%9C%CE%B7_%CE%BD%CF%84%CE%B5%CF%84%CE%B5%CF%81%CE%BC%CE%B9%CE%BD%CE%B9%CF%83%CF%84%CE%B9%CE%BA%CF%8C_%CF%80%CE%B5%CF%80%CE%B5%CF%81%CE%B1%CF%83%CE%BC%CE%AD%CE%BD%CE%BF_%CE%B1%CF%85%CF%84%CF%8C%CE%BC%CE%B1%CF%84%CE%BF" title="Μη ντετερμινιστικό πεπερασμένο αυτόματο – Greek" lang="el" hreflang="el">Ελληνικά</a></li><li class="interlanguage-link interwiki-es"><a href="//es.wikipedia.org/wiki/Aut%C3%B3mata_finito_no_determinista" title="Autómata finito no determinista – Spanish" lang="es" hreflang="es">Español</a></li><li class="interlanguage-link interwiki-fa"><a href="//fa.wikipedia.org/wiki/%D8%A7%D8%AA%D9%88%D9%85%D8%A7%D8%AA%D9%88%D9%86_%D8%AA%D8%B9%DB%8C%DB%8C%D9%86%E2%80%8C%D9%86%D8%A7%D9%BE%D8%B0%DB%8C%D8%B1_%D9%85%D8%AA%D9%86%D8%A7%D9%87%DB%8C" title="اتوماتون تعیین‌ناپذیر متناهی – Persian" lang="fa" hreflang="fa">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a href="//fr.wikipedia.org/wiki/Automate_fini_non_d%C3%A9terministe" title="Automate fini non déterministe – French" lang="fr" hreflang="fr">Français</a></li><li class="interlanguage-link interwiki-hr"><a href="//hr.wikipedia.org/wiki/Nedeterministi%C4%8Dki_kona%C4%8Dni_automat" title="Nedeterministički konačni automat – Croatian" lang="hr" hreflang="hr">Hrvatski</a></li><li class="interlanguage-link interwiki-it"><a href="//it.wikipedia.org/wiki/Automa_a_stati_finiti_non_deterministico" title="Automa a stati finiti non deterministico – Italian" lang="it" hreflang="it">Italiano</a></li><li class="interlanguage-link interwiki-he"><a href="//he.wikipedia.org/wiki/%D7%90%D7%95%D7%98%D7%95%D7%9E%D7%98_%D7%A1%D7%95%D7%A4%D7%99_%D7%9C%D7%90_%D7%93%D7%98%D7%A8%D7%9E%D7%99%D7%A0%D7%99%D7%A1%D7%98%D7%99" title="אוטומט סופי לא דטרמיניסטי – Hebrew" lang="he" hreflang="he">עברית</a></li><li class="interlanguage-link interwiki-hu"><a href="//hu.wikipedia.org/wiki/Nemdeterminisztikus_v%C3%A9ges_%C3%A1llapot%C3%BA_g%C3%A9p" title="Nemdeterminisztikus véges állapotú gép – Hungarian" lang="hu" hreflang="hu">Magyar</a></li><li class="interlanguage-link interwiki-ja"><a href="//ja.wikipedia.org/wiki/%E9%9D%9E%E6%B1%BA%E5%AE%9A%E6%80%A7%E6%9C%89%E9%99%90%E3%82%AA%E3%83%BC%E3%83%88%E3%83%9E%E3%83%88%E3%83%B3" title="非決定性有限オートマトン – Japanese" lang="ja" hreflang="ja">日本語</a></li><li class="interlanguage-link interwiki-pl"><a href="//pl.wikipedia.org/wiki/Niedeterministyczny_automat_sko%C5%84czony" title="Niedeterministyczny automat skończony – Polish" lang="pl" hreflang="pl">Polski</a></li><li class="interlanguage-link interwiki-pt"><a href="//pt.wikipedia.org/wiki/M%C3%A1quina_de_estados_finitos_n%C3%A3o_determin%C3%ADstica" title="Máquina de estados finitos não determinística – Portuguese" lang="pt" hreflang="pt">Português</a></li><li class="interlanguage-link interwiki-sr"><a href="//sr.wikipedia.org/wiki/%D0%9D%D0%B5%D0%B4%D0%B5%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D0%B8%D1%87%D0%BA%D0%B8_%D0%BA%D0%BE%D0%BD%D0%B0%D1%87%D0%BD%D0%B8_%D0%B0%D1%83%D1%82%D0%BE%D0%BC%D0%B0%D1%82" title="Недетерминистички коначни аутомат – Serbian" lang="sr" hreflang="sr">Српски / srpski</a></li><li class="interlanguage-link interwiki-sh"><a href="//sh.wikipedia.org/wiki/Nedeterministi%C4%8Dki_kona%C4%8Dni_automat" title="Nedeterministički konačni automat – Serbo-Croatian" lang="sh" hreflang="sh">Srpskohrvatski / српскохрватски</a></li><li class="interlanguage-link interwiki-uk"><a href="//uk.wikipedia.org/wiki/%D0%9D%D0%B5%D0%B4%D0%B5%D1%82%D0%B5%D1%80%D0%BC%D1%96%D0%BD%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B9_%D1%81%D0%BA%D1%96%D0%BD%D1%87%D0%B5%D0%BD%D0%BD%D0%B8%D0%B9_%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82" title="Недетермінований скінченний автомат – Ukrainian" lang="uk" hreflang="uk">Українська</a></li><li class="interlanguage-link interwiki-zh"><a href="//zh.wikipedia.org/wiki/%E9%9D%9E%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA" title="非确定有限状态自动机 – Chinese" lang="zh" hreflang="zh">中文</a></li><li class="uls-p-lang-dummy"><a href="#"></a></li>					</ul>
				<div class='after-portlet after-portlet-lang'><span class="wb-langlinks-edit wb-langlinks-link"><a href="//www.wikidata.org/wiki/Q617295#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>			</div>
		</div>
				</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 23 March 2016, at 14:04.</li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="//creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="//wikimediafoundation.org/wiki/Privacy_policy" title="wmf:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-cookiestatement"><a href="//wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
											<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Nondeterministic_finite_automaton&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
											<li id="footer-copyrightico">
							<a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"/></a>						</li>
											<li id="footer-poweredbyico">
							<a href="//www.mediawiki.org/"><img src="/w/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/w/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /w/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a>						</li>
									</ul>
						<div style="clear:both"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.loader.state({"ext.globalCssJs.site":"ready","ext.globalCssJs.user":"ready","user":"ready","user.groups":"ready"});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.eventLogging.subscriber","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.switcher","ext.gadget.featured-articles-links","mmv.bootstrap.autostart","ext.visualEditor.targetLoader","ext.wikimediaEvents","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage"]);});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":84,"wgHostname":"mw1180"});});</script>
	</body>
</html>

https://docs.python.org/3/library/re.html : https://docs.python.org/3/library/re.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>6.2. re — Regular expression operations &mdash; Python 3.5.1 documentation</title>
    
    <link rel="stylesheet" href="../_static/pydoctheme.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '3.5.1',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <script type="text/javascript" src="../_static/sidebar.js"></script>
    <link rel="search" type="application/opensearchdescription+xml"
          title="Search within Python 3.5.1 documentation"
          href="../_static/opensearch.xml"/>
    <link rel="author" title="About these documents" href="../about.html" />
    <link rel="copyright" title="Copyright" href="../copyright.html" />
    <link rel="top" title="Python 3.5.1 documentation" href="../contents.html" />
    <link rel="up" title="6. Text Processing Services" href="text.html" />
    <link rel="next" title="6.3. difflib — Helpers for computing deltas" href="difflib.html" />
    <link rel="prev" title="6.1. string — Common string operations" href="string.html" />
    <link rel="shortcut icon" type="image/png" href="../_static/py.png" />
    <script type="text/javascript" src="../_static/copybutton.js"></script>
    <script type="text/javascript" src="../_static/version_switch.js"></script>
    
 

  </head>
  <body role="document">  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="difflib.html" title="6.3. difflib — Helpers for computing deltas"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="string.html" title="6.1. string — Common string operations"
             accesskey="P">previous</a> |</li>
        <li><img src="../_static/py.png" alt=""
                 style="vertical-align: middle; margin-top: -1px"/></li>
        <li><a href="https://www.python.org/">Python</a> &raquo;</li>
        <li>
          <span class="version_switcher_placeholder">3.5.1</span>
          <a href="../index.html">Documentation </a> &raquo;
        </li>

          <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="text.html" accesskey="U">6. Text Processing Services</a> &raquo;</li> 
      </ul>
    </div>    

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <div class="section" id="module-re">
<span id="re-regular-expression-operations"></span><h1>6.2. <a class="reference internal" href="#module-re" title="re: Regular expression operations."><code class="xref py py-mod docutils literal"><span class="pre">re</span></code></a> &#8212; Regular expression operations<a class="headerlink" href="#module-re" title="Permalink to this headline">¶</a></h1>
<p>This module provides regular expression matching operations similar to
those found in Perl.</p>
<p>Both patterns and strings to be searched can be Unicode strings as well as
8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed:
that is, you cannot match an Unicode string with a byte pattern or
vice-versa; similarly, when asking for a substitution, the replacement
string must be of the same type as both the pattern and the search string.</p>
<p>Regular expressions use the backslash character (<code class="docutils literal"><span class="pre">'\'</span></code>) to indicate
special forms or to allow special characters to be used without invoking
their special meaning.  This collides with Python&#8217;s usage of the same
character for the same purpose in string literals; for example, to match
a literal backslash, one might have to write <code class="docutils literal"><span class="pre">'\\\\'</span></code> as the pattern
string, because the regular expression must be <code class="docutils literal"><span class="pre">\\</span></code>, and each
backslash must be expressed as <code class="docutils literal"><span class="pre">\\</span></code> inside a regular Python string
literal.</p>
<p>The solution is to use Python&#8217;s raw string notation for regular expression
patterns; backslashes are not handled in any special way in a string literal
prefixed with <code class="docutils literal"><span class="pre">'r'</span></code>.  So <code class="docutils literal"><span class="pre">r&quot;\n&quot;</span></code> is a two-character string containing
<code class="docutils literal"><span class="pre">'\'</span></code> and <code class="docutils literal"><span class="pre">'n'</span></code>, while <code class="docutils literal"><span class="pre">&quot;\n&quot;</span></code> is a one-character string containing a
newline.  Usually patterns will be expressed in Python code using this raw
string notation.</p>
<p>It is important to note that most regular expression operations are available as
module-level functions and methods on
<a class="reference internal" href="#re-objects"><span>compiled regular expressions</span></a>.  The functions are shortcuts
that don&#8217;t require you to compile a regex object first, but miss some
fine-tuning parameters.</p>
<div class="section" id="regular-expression-syntax">
<span id="re-syntax"></span><h2>6.2.1. Regular Expression Syntax<a class="headerlink" href="#regular-expression-syntax" title="Permalink to this headline">¶</a></h2>
<p>A regular expression (or RE) specifies a set of strings that matches it; the
functions in this module let you check if a particular string matches a given
regular expression (or if a given regular expression matches a particular
string, which comes down to the same thing).</p>
<p>Regular expressions can be concatenated to form new regular expressions; if <em>A</em>
and <em>B</em> are both regular expressions, then <em>AB</em> is also a regular expression.
In general, if a string <em>p</em> matches <em>A</em> and another string <em>q</em> matches <em>B</em>, the
string <em>pq</em> will match AB.  This holds unless <em>A</em> or <em>B</em> contain low precedence
operations; boundary conditions between <em>A</em> and <em>B</em>; or have numbered group
references.  Thus, complex expressions can easily be constructed from simpler
primitive expressions like the ones described here.  For details of the theory
and implementation of regular expressions, consult the Friedl book referenced
above, or almost any textbook about compiler construction.</p>
<p>A brief explanation of the format of regular expressions follows.  For further
information and a gentler presentation, consult the <a class="reference internal" href="../howto/regex.html#regex-howto"><span>Regular Expression HOWTO</span></a>.</p>
<p>Regular expressions can contain both special and ordinary characters. Most
ordinary characters, like <code class="docutils literal"><span class="pre">'A'</span></code>, <code class="docutils literal"><span class="pre">'a'</span></code>, or <code class="docutils literal"><span class="pre">'0'</span></code>, are the simplest regular
expressions; they simply match themselves.  You can concatenate ordinary
characters, so <code class="docutils literal"><span class="pre">last</span></code> matches the string <code class="docutils literal"><span class="pre">'last'</span></code>.  (In the rest of this
section, we&#8217;ll write RE&#8217;s in <code class="docutils literal"><span class="pre">this</span> <span class="pre">special</span> <span class="pre">style</span></code>, usually without quotes, and
strings to be matched <code class="docutils literal"><span class="pre">'in</span> <span class="pre">single</span> <span class="pre">quotes'</span></code>.)</p>
<p>Some characters, like <code class="docutils literal"><span class="pre">'|'</span></code> or <code class="docutils literal"><span class="pre">'('</span></code>, are special. Special
characters either stand for classes of ordinary characters, or affect
how the regular expressions around them are interpreted. Regular
expression pattern strings may not contain null bytes, but can specify
the null byte using a <code class="docutils literal"><span class="pre">\number</span></code> notation such as <code class="docutils literal"><span class="pre">'\x00'</span></code>.</p>
<p>The special characters are:</p>
<dl class="docutils">
<dt><code class="docutils literal"><span class="pre">'.'</span></code></dt>
<dd>(Dot.)  In the default mode, this matches any character except a newline.  If
the <a class="reference internal" href="#re.DOTALL" title="re.DOTALL"><code class="xref py py-const docutils literal"><span class="pre">DOTALL</span></code></a> flag has been specified, this matches any character
including a newline.</dd>
<dt><code class="docutils literal"><span class="pre">'^'</span></code></dt>
<dd>(Caret.)  Matches the start of the string, and in <a class="reference internal" href="#re.MULTILINE" title="re.MULTILINE"><code class="xref py py-const docutils literal"><span class="pre">MULTILINE</span></code></a> mode also
matches immediately after each newline.</dd>
<dt><code class="docutils literal"><span class="pre">'$'</span></code></dt>
<dd>Matches the end of the string or just before the newline at the end of the
string, and in <a class="reference internal" href="#re.MULTILINE" title="re.MULTILINE"><code class="xref py py-const docutils literal"><span class="pre">MULTILINE</span></code></a> mode also matches before a newline.  <code class="docutils literal"><span class="pre">foo</span></code>
matches both &#8216;foo&#8217; and &#8216;foobar&#8217;, while the regular expression <code class="docutils literal"><span class="pre">foo$</span></code> matches
only &#8216;foo&#8217;.  More interestingly, searching for <code class="docutils literal"><span class="pre">foo.$</span></code> in <code class="docutils literal"><span class="pre">'foo1\nfoo2\n'</span></code>
matches &#8216;foo2&#8217; normally, but &#8216;foo1&#8217; in <a class="reference internal" href="#re.MULTILINE" title="re.MULTILINE"><code class="xref py py-const docutils literal"><span class="pre">MULTILINE</span></code></a> mode; searching for
a single <code class="docutils literal"><span class="pre">$</span></code> in <code class="docutils literal"><span class="pre">'foo\n'</span></code> will find two (empty) matches: one just before
the newline, and one at the end of the string.</dd>
<dt><code class="docutils literal"><span class="pre">'*'</span></code></dt>
<dd>Causes the resulting RE to match 0 or more repetitions of the preceding RE, as
many repetitions as are possible.  <code class="docutils literal"><span class="pre">ab*</span></code> will match &#8216;a&#8217;, &#8216;ab&#8217;, or &#8216;a&#8217; followed
by any number of &#8216;b&#8217;s.</dd>
<dt><code class="docutils literal"><span class="pre">'+'</span></code></dt>
<dd>Causes the resulting RE to match 1 or more repetitions of the preceding RE.
<code class="docutils literal"><span class="pre">ab+</span></code> will match &#8216;a&#8217; followed by any non-zero number of &#8216;b&#8217;s; it will not
match just &#8216;a&#8217;.</dd>
<dt><code class="docutils literal"><span class="pre">'?'</span></code></dt>
<dd>Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.
<code class="docutils literal"><span class="pre">ab?</span></code> will match either &#8216;a&#8217; or &#8216;ab&#8217;.</dd>
<dt><code class="docutils literal"><span class="pre">*?</span></code>, <code class="docutils literal"><span class="pre">+?</span></code>, <code class="docutils literal"><span class="pre">??</span></code></dt>
<dd>The <code class="docutils literal"><span class="pre">'*'</span></code>, <code class="docutils literal"><span class="pre">'+'</span></code>, and <code class="docutils literal"><span class="pre">'?'</span></code> qualifiers are all <em class="dfn">greedy</em>; they match
as much text as possible.  Sometimes this behaviour isn&#8217;t desired; if the RE
<code class="docutils literal"><span class="pre">&lt;.*&gt;</span></code> is matched against <code class="docutils literal"><span class="pre">'&lt;H1&gt;title&lt;/H1&gt;'</span></code>, it will match the entire
string, and not just <code class="docutils literal"><span class="pre">'&lt;H1&gt;'</span></code>.  Adding <code class="docutils literal"><span class="pre">'?'</span></code> after the qualifier makes it
perform the match in <em class="dfn">non-greedy</em> or <em class="dfn">minimal</em> fashion; as <em>few</em>
characters as possible will be matched.  Using <code class="docutils literal"><span class="pre">.*?</span></code> in the previous
expression will match only <code class="docutils literal"><span class="pre">'&lt;H1&gt;'</span></code>.</dd>
<dt><code class="docutils literal"><span class="pre">{m}</span></code></dt>
<dd>Specifies that exactly <em>m</em> copies of the previous RE should be matched; fewer
matches cause the entire RE not to match.  For example, <code class="docutils literal"><span class="pre">a{6}</span></code> will match
exactly six <code class="docutils literal"><span class="pre">'a'</span></code> characters, but not five.</dd>
<dt><code class="docutils literal"><span class="pre">{m,n}</span></code></dt>
<dd>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding
RE, attempting to match as many repetitions as possible.  For example,
<code class="docutils literal"><span class="pre">a{3,5}</span></code> will match from 3 to 5 <code class="docutils literal"><span class="pre">'a'</span></code> characters.  Omitting <em>m</em> specifies a
lower bound of zero,  and omitting <em>n</em> specifies an infinite upper bound.  As an
example, <code class="docutils literal"><span class="pre">a{4,}b</span></code> will match <code class="docutils literal"><span class="pre">aaaab</span></code> or a thousand <code class="docutils literal"><span class="pre">'a'</span></code> characters
followed by a <code class="docutils literal"><span class="pre">b</span></code>, but not <code class="docutils literal"><span class="pre">aaab</span></code>. The comma may not be omitted or the
modifier would be confused with the previously described form.</dd>
<dt><code class="docutils literal"><span class="pre">{m,n}?</span></code></dt>
<dd>Causes the resulting RE to match from <em>m</em> to <em>n</em> repetitions of the preceding
RE, attempting to match as <em>few</em> repetitions as possible.  This is the
non-greedy version of the previous qualifier.  For example, on the
6-character string <code class="docutils literal"><span class="pre">'aaaaaa'</span></code>, <code class="docutils literal"><span class="pre">a{3,5}</span></code> will match 5 <code class="docutils literal"><span class="pre">'a'</span></code> characters,
while <code class="docutils literal"><span class="pre">a{3,5}?</span></code> will only match 3 characters.</dd>
<dt><code class="docutils literal"><span class="pre">'\'</span></code></dt>
<dd><p class="first">Either escapes special characters (permitting you to match characters like
<code class="docutils literal"><span class="pre">'*'</span></code>, <code class="docutils literal"><span class="pre">'?'</span></code>, and so forth), or signals a special sequence; special
sequences are discussed below.</p>
<p class="last">If you&#8217;re not using a raw string to express the pattern, remember that Python
also uses the backslash as an escape sequence in string literals; if the escape
sequence isn&#8217;t recognized by Python&#8217;s parser, the backslash and subsequent
character are included in the resulting string.  However, if Python would
recognize the resulting sequence, the backslash should be repeated twice.  This
is complicated and hard to understand, so it&#8217;s highly recommended that you use
raw strings for all but the simplest expressions.</p>
</dd>
<dt><code class="docutils literal"><span class="pre">[]</span></code></dt>
<dd><p class="first">Used to indicate a set of characters.  In a set:</p>
<ul class="last simple">
<li>Characters can be listed individually, e.g. <code class="docutils literal"><span class="pre">[amk]</span></code> will match <code class="docutils literal"><span class="pre">'a'</span></code>,
<code class="docutils literal"><span class="pre">'m'</span></code>, or <code class="docutils literal"><span class="pre">'k'</span></code>.</li>
<li>Ranges of characters can be indicated by giving two characters and separating
them by a <code class="docutils literal"><span class="pre">'-'</span></code>, for example <code class="docutils literal"><span class="pre">[a-z]</span></code> will match any lowercase ASCII letter,
<code class="docutils literal"><span class="pre">[0-5][0-9]</span></code> will match all the two-digits numbers from <code class="docutils literal"><span class="pre">00</span></code> to <code class="docutils literal"><span class="pre">59</span></code>, and
<code class="docutils literal"><span class="pre">[0-9A-Fa-f]</span></code> will match any hexadecimal digit.  If <code class="docutils literal"><span class="pre">-</span></code> is escaped (e.g.
<code class="docutils literal"><span class="pre">[a\-z]</span></code>) or if it&#8217;s placed as the first or last character (e.g. <code class="docutils literal"><span class="pre">[a-]</span></code>),
it will match a literal <code class="docutils literal"><span class="pre">'-'</span></code>.</li>
<li>Special characters lose their special meaning inside sets.  For example,
<code class="docutils literal"><span class="pre">[(+*)]</span></code> will match any of the literal characters <code class="docutils literal"><span class="pre">'('</span></code>, <code class="docutils literal"><span class="pre">'+'</span></code>,
<code class="docutils literal"><span class="pre">'*'</span></code>, or <code class="docutils literal"><span class="pre">')'</span></code>.</li>
<li>Character classes such as <code class="docutils literal"><span class="pre">\w</span></code> or <code class="docutils literal"><span class="pre">\S</span></code> (defined below) are also accepted
inside a set, although the characters they match depends on whether
<a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> or <a class="reference internal" href="#re.LOCALE" title="re.LOCALE"><code class="xref py py-const docutils literal"><span class="pre">LOCALE</span></code></a> mode is in force.</li>
<li>Characters that are not within a range can be matched by <em class="dfn">complementing</em>
the set.  If the first character of the set is <code class="docutils literal"><span class="pre">'^'</span></code>, all the characters
that are <em>not</em> in the set will be matched.  For example, <code class="docutils literal"><span class="pre">[^5]</span></code> will match
any character except <code class="docutils literal"><span class="pre">'5'</span></code>, and <code class="docutils literal"><span class="pre">[^^]</span></code> will match any character except
<code class="docutils literal"><span class="pre">'^'</span></code>.  <code class="docutils literal"><span class="pre">^</span></code> has no special meaning if it&#8217;s not the first character in
the set.</li>
<li>To match a literal <code class="docutils literal"><span class="pre">']'</span></code> inside a set, precede it with a backslash, or
place it at the beginning of the set.  For example, both <code class="docutils literal"><span class="pre">[()[\]{}]</span></code> and
<code class="docutils literal"><span class="pre">[]()[{}]</span></code> will both match a parenthesis.</li>
</ul>
</dd>
<dt><code class="docutils literal"><span class="pre">'|'</span></code></dt>
<dd><code class="docutils literal"><span class="pre">A|B</span></code>, where A and B can be arbitrary REs, creates a regular expression that
will match either A or B.  An arbitrary number of REs can be separated by the
<code class="docutils literal"><span class="pre">'|'</span></code> in this way.  This can be used inside groups (see below) as well.  As
the target string is scanned, REs separated by <code class="docutils literal"><span class="pre">'|'</span></code> are tried from left to
right. When one pattern completely matches, that branch is accepted. This means
that once <code class="docutils literal"><span class="pre">A</span></code> matches, <code class="docutils literal"><span class="pre">B</span></code> will not be tested further, even if it would
produce a longer overall match.  In other words, the <code class="docutils literal"><span class="pre">'|'</span></code> operator is never
greedy.  To match a literal <code class="docutils literal"><span class="pre">'|'</span></code>, use <code class="docutils literal"><span class="pre">\|</span></code>, or enclose it inside a
character class, as in <code class="docutils literal"><span class="pre">[|]</span></code>.</dd>
<dt><code class="docutils literal"><span class="pre">(...)</span></code></dt>
<dd>Matches whatever regular expression is inside the parentheses, and indicates the
start and end of a group; the contents of a group can be retrieved after a match
has been performed, and can be matched later in the string with the <code class="docutils literal"><span class="pre">\number</span></code>
special sequence, described below.  To match the literals <code class="docutils literal"><span class="pre">'('</span></code> or <code class="docutils literal"><span class="pre">')'</span></code>,
use <code class="docutils literal"><span class="pre">\(</span></code> or <code class="docutils literal"><span class="pre">\)</span></code>, or enclose them inside a character class: <code class="docutils literal"><span class="pre">[(]</span> <span class="pre">[)]</span></code>.</dd>
<dt><code class="docutils literal"><span class="pre">(?...)</span></code></dt>
<dd>This is an extension notation (a <code class="docutils literal"><span class="pre">'?'</span></code> following a <code class="docutils literal"><span class="pre">'('</span></code> is not meaningful
otherwise).  The first character after the <code class="docutils literal"><span class="pre">'?'</span></code> determines what the meaning
and further syntax of the construct is. Extensions usually do not create a new
group; <code class="docutils literal"><span class="pre">(?P&lt;name&gt;...)</span></code> is the only exception to this rule. Following are the
currently supported extensions.</dd>
<dt><code class="docutils literal"><span class="pre">(?aiLmsux)</span></code></dt>
<dd><p class="first">(One or more letters from the set <code class="docutils literal"><span class="pre">'a'</span></code>, <code class="docutils literal"><span class="pre">'i'</span></code>, <code class="docutils literal"><span class="pre">'L'</span></code>, <code class="docutils literal"><span class="pre">'m'</span></code>,
<code class="docutils literal"><span class="pre">'s'</span></code>, <code class="docutils literal"><span class="pre">'u'</span></code>, <code class="docutils literal"><span class="pre">'x'</span></code>.)  The group matches the empty string; the
letters set the corresponding flags: <a class="reference internal" href="#re.A" title="re.A"><code class="xref py py-const docutils literal"><span class="pre">re.A</span></code></a> (ASCII-only matching),
<a class="reference internal" href="#re.I" title="re.I"><code class="xref py py-const docutils literal"><span class="pre">re.I</span></code></a> (ignore case), <a class="reference internal" href="#re.L" title="re.L"><code class="xref py py-const docutils literal"><span class="pre">re.L</span></code></a> (locale dependent),
<a class="reference internal" href="#re.M" title="re.M"><code class="xref py py-const docutils literal"><span class="pre">re.M</span></code></a> (multi-line), <a class="reference internal" href="#re.S" title="re.S"><code class="xref py py-const docutils literal"><span class="pre">re.S</span></code></a> (dot matches all),
and <a class="reference internal" href="#re.X" title="re.X"><code class="xref py py-const docutils literal"><span class="pre">re.X</span></code></a> (verbose), for the entire regular expression. (The
flags are described in <a class="reference internal" href="#contents-of-module-re"><span>Module Contents</span></a>.) This
is useful if you wish to include the flags as part of the regular
expression, instead of passing a <em>flag</em> argument to the
<a class="reference internal" href="#re.compile" title="re.compile"><code class="xref py py-func docutils literal"><span class="pre">re.compile()</span></code></a> function.</p>
<p class="last">Note that the <code class="docutils literal"><span class="pre">(?x)</span></code> flag changes how the expression is parsed. It should be
used first in the expression string, or after one or more whitespace characters.
If there are non-whitespace characters before the flag, the results are
undefined.</p>
</dd>
<dt><code class="docutils literal"><span class="pre">(?:...)</span></code></dt>
<dd>A non-capturing version of regular parentheses.  Matches whatever regular
expression is inside the parentheses, but the substring matched by the group
<em>cannot</em> be retrieved after performing a match or referenced later in the
pattern.</dd>
<dt><code class="docutils literal"><span class="pre">(?P&lt;name&gt;...)</span></code></dt>
<dd><p class="first">Similar to regular parentheses, but the substring matched by the group is
accessible via the symbolic group name <em>name</em>.  Group names must be valid
Python identifiers, and each group name must be defined only once within a
regular expression.  A symbolic group is also a numbered group, just as if
the group were not named.</p>
<p>Named groups can be referenced in three contexts.  If the pattern is
<code class="docutils literal"><span class="pre">(?P&lt;quote&gt;['&quot;]).*?(?P=quote)</span></code> (i.e. matching a string quoted with either
single or double quotes):</p>
<table border="1" class="last docutils">
<colgroup>
<col width="53%" />
<col width="47%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Context of reference to group &#8220;quote&#8221;</th>
<th class="head">Ways to reference it</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>in the same pattern itself</td>
<td><ul class="first last simple">
<li><code class="docutils literal"><span class="pre">(?P=quote)</span></code> (as shown)</li>
<li><code class="docutils literal"><span class="pre">\1</span></code></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td>when processing match object <code class="docutils literal"><span class="pre">m</span></code></td>
<td><ul class="first last simple">
<li><code class="docutils literal"><span class="pre">m.group('quote')</span></code></li>
<li><code class="docutils literal"><span class="pre">m.end('quote')</span></code> (etc.)</li>
</ul>
</td>
</tr>
<tr class="row-even"><td>in a string passed to the <code class="docutils literal"><span class="pre">repl</span></code>
argument of <code class="docutils literal"><span class="pre">re.sub()</span></code></td>
<td><ul class="first last simple">
<li><code class="docutils literal"><span class="pre">\g&lt;quote&gt;</span></code></li>
<li><code class="docutils literal"><span class="pre">\g&lt;1&gt;</span></code></li>
<li><code class="docutils literal"><span class="pre">\1</span></code></li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd>
<dt><code class="docutils literal"><span class="pre">(?P=name)</span></code></dt>
<dd>A backreference to a named group; it matches whatever text was matched by the
earlier group named <em>name</em>.</dd>
<dt><code class="docutils literal"><span class="pre">(?#...)</span></code></dt>
<dd>A comment; the contents of the parentheses are simply ignored.</dd>
<dt><code class="docutils literal"><span class="pre">(?=...)</span></code></dt>
<dd>Matches if <code class="docutils literal"><span class="pre">...</span></code> matches next, but doesn&#8217;t consume any of the string.  This is
called a lookahead assertion.  For example, <code class="docutils literal"><span class="pre">Isaac</span> <span class="pre">(?=Asimov)</span></code> will match
<code class="docutils literal"><span class="pre">'Isaac</span> <span class="pre">'</span></code> only if it&#8217;s followed by <code class="docutils literal"><span class="pre">'Asimov'</span></code>.</dd>
<dt><code class="docutils literal"><span class="pre">(?!...)</span></code></dt>
<dd>Matches if <code class="docutils literal"><span class="pre">...</span></code> doesn&#8217;t match next.  This is a negative lookahead assertion.
For example, <code class="docutils literal"><span class="pre">Isaac</span> <span class="pre">(?!Asimov)</span></code> will match <code class="docutils literal"><span class="pre">'Isaac</span> <span class="pre">'</span></code> only if it&#8217;s <em>not</em>
followed by <code class="docutils literal"><span class="pre">'Asimov'</span></code>.</dd>
<dt><code class="docutils literal"><span class="pre">(?&lt;=...)</span></code></dt>
<dd><p class="first">Matches if the current position in the string is preceded by a match for <code class="docutils literal"><span class="pre">...</span></code>
that ends at the current position.  This is called a <em class="dfn">positive lookbehind
assertion</em>. <code class="docutils literal"><span class="pre">(?&lt;=abc)def</span></code> will find a match in <code class="docutils literal"><span class="pre">abcdef</span></code>, since the
lookbehind will back up 3 characters and check if the contained pattern matches.
The contained pattern must only match strings of some fixed length, meaning that
<code class="docutils literal"><span class="pre">abc</span></code> or <code class="docutils literal"><span class="pre">a|b</span></code> are allowed, but <code class="docutils literal"><span class="pre">a*</span></code> and <code class="docutils literal"><span class="pre">a{3,4}</span></code> are not.  Note that
patterns which start with positive lookbehind assertions will not match at the
beginning of the string being searched; you will most likely want to use the
<a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a> function rather than the <a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-func docutils literal"><span class="pre">match()</span></code></a> function:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">re</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;(?&lt;=abc)def&#39;</span><span class="p">,</span> <span class="s1">&#39;abcdef&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="go">&#39;def&#39;</span>
</pre></div>
</div>
<p>This example looks for a word following a hyphen:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;(?&lt;=-)\w+&#39;</span><span class="p">,</span> <span class="s1">&#39;spam-egg&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="go">&#39;egg&#39;</span>
</pre></div>
</div>
<div class="last versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Added support for group references of fixed length.</p>
</div>
</dd>
<dt><code class="docutils literal"><span class="pre">(?&lt;!...)</span></code></dt>
<dd>Matches if the current position in the string is not preceded by a match for
<code class="docutils literal"><span class="pre">...</span></code>.  This is called a <em class="dfn">negative lookbehind assertion</em>.  Similar to
positive lookbehind assertions, the contained pattern must only match strings of
some fixed length.  Patterns which start with negative lookbehind assertions may
match at the beginning of the string being searched.</dd>
<dt><code class="docutils literal"><span class="pre">(?(id/name)yes-pattern|no-pattern)</span></code></dt>
<dd>Will try to match with <code class="docutils literal"><span class="pre">yes-pattern</span></code> if the group with given <em>id</em> or
<em>name</em> exists, and with <code class="docutils literal"><span class="pre">no-pattern</span></code> if it doesn&#8217;t. <code class="docutils literal"><span class="pre">no-pattern</span></code> is
optional and can be omitted. For example,
<code class="docutils literal"><span class="pre">(&lt;)?(\w+&#64;\w+(?:\.\w+)+)(?(1)&gt;|$)</span></code> is a poor email matching pattern, which
will match with <code class="docutils literal"><span class="pre">'&lt;user&#64;host.com&gt;'</span></code> as well as <code class="docutils literal"><span class="pre">'user&#64;host.com'</span></code>, but
not with <code class="docutils literal"><span class="pre">'&lt;user&#64;host.com'</span></code> nor <code class="docutils literal"><span class="pre">'user&#64;host.com&gt;'</span></code>.</dd>
</dl>
<p>The special sequences consist of <code class="docutils literal"><span class="pre">'\'</span></code> and a character from the list below.
If the ordinary character is not on the list, then the resulting RE will match
the second character.  For example, <code class="docutils literal"><span class="pre">\$</span></code> matches the character <code class="docutils literal"><span class="pre">'$'</span></code>.</p>
<dl class="docutils">
<dt><code class="docutils literal"><span class="pre">\number</span></code></dt>
<dd>Matches the contents of the group of the same number.  Groups are numbered
starting from 1.  For example, <code class="docutils literal"><span class="pre">(.+)</span> <span class="pre">\1</span></code> matches <code class="docutils literal"><span class="pre">'the</span> <span class="pre">the'</span></code> or <code class="docutils literal"><span class="pre">'55</span> <span class="pre">55'</span></code>,
but not <code class="docutils literal"><span class="pre">'thethe'</span></code> (note the space after the group).  This special sequence
can only be used to match one of the first 99 groups.  If the first digit of
<em>number</em> is 0, or <em>number</em> is 3 octal digits long, it will not be interpreted as
a group match, but as the character with octal value <em>number</em>. Inside the
<code class="docutils literal"><span class="pre">'['</span></code> and <code class="docutils literal"><span class="pre">']'</span></code> of a character class, all numeric escapes are treated as
characters.</dd>
<dt><code class="docutils literal"><span class="pre">\A</span></code></dt>
<dd>Matches only at the start of the string.</dd>
<dt><code class="docutils literal"><span class="pre">\b</span></code></dt>
<dd><p class="first">Matches the empty string, but only at the beginning or end of a word.
A word is defined as a sequence of Unicode alphanumeric or underscore
characters, so the end of a word is indicated by whitespace or a
non-alphanumeric, non-underscore Unicode character.  Note that formally,
<code class="docutils literal"><span class="pre">\b</span></code> is defined as the boundary between a <code class="docutils literal"><span class="pre">\w</span></code> and a <code class="docutils literal"><span class="pre">\W</span></code> character
(or vice versa), or between <code class="docutils literal"><span class="pre">\w</span></code> and the beginning/end of the string.
This means that <code class="docutils literal"><span class="pre">r'\bfoo\b'</span></code> matches <code class="docutils literal"><span class="pre">'foo'</span></code>, <code class="docutils literal"><span class="pre">'foo.'</span></code>, <code class="docutils literal"><span class="pre">'(foo)'</span></code>,
<code class="docutils literal"><span class="pre">'bar</span> <span class="pre">foo</span> <span class="pre">baz'</span></code> but not <code class="docutils literal"><span class="pre">'foobar'</span></code> or <code class="docutils literal"><span class="pre">'foo3'</span></code>.</p>
<p class="last">By default Unicode alphanumerics are the ones used, but this can  be changed
by using the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag.  Inside a character range, <code class="docutils literal"><span class="pre">\b</span></code>
represents the backspace character, for compatibility with Python&#8217;s string
literals.</p>
</dd>
<dt><code class="docutils literal"><span class="pre">\B</span></code></dt>
<dd>Matches the empty string, but only when it is <em>not</em> at the beginning or end
of a word.  This means that <code class="docutils literal"><span class="pre">r'py\B'</span></code> matches <code class="docutils literal"><span class="pre">'python'</span></code>, <code class="docutils literal"><span class="pre">'py3'</span></code>,
<code class="docutils literal"><span class="pre">'py2'</span></code>, but not <code class="docutils literal"><span class="pre">'py'</span></code>, <code class="docutils literal"><span class="pre">'py.'</span></code>, or <code class="docutils literal"><span class="pre">'py!'</span></code>.
<code class="docutils literal"><span class="pre">\B</span></code> is just the opposite of <code class="docutils literal"><span class="pre">\b</span></code>, so word characters are
Unicode alphanumerics or the underscore, although this can be changed
by using the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag.</dd>
<dt><code class="docutils literal"><span class="pre">\d</span></code></dt>
<dd><dl class="first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches any Unicode decimal digit (that is, any character in
Unicode character category [Nd]).  This includes <code class="docutils literal"><span class="pre">[0-9]</span></code>, and
also many other digit characters.  If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is
used only <code class="docutils literal"><span class="pre">[0-9]</span></code> is matched (but the flag affects the entire
regular expression, so in such cases using an explicit <code class="docutils literal"><span class="pre">[0-9]</span></code>
may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches any decimal digit; this is equivalent to <code class="docutils literal"><span class="pre">[0-9]</span></code>.</dd>
</dl>
</dd>
<dt><code class="docutils literal"><span class="pre">\D</span></code></dt>
<dd>Matches any character which is not a Unicode decimal digit. This is
the opposite of <code class="docutils literal"><span class="pre">\d</span></code>. If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is used this
becomes the equivalent of <code class="docutils literal"><span class="pre">[^0-9]</span></code> (but the flag affects the entire
regular expression, so in such cases using an explicit <code class="docutils literal"><span class="pre">[^0-9]</span></code> may
be a better choice).</dd>
<dt><code class="docutils literal"><span class="pre">\s</span></code></dt>
<dd><dl class="first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches Unicode whitespace characters (which includes
<code class="docutils literal"><span class="pre">[</span> <span class="pre">\t\n\r\f\v]</span></code>, and also many other characters, for example the
non-breaking spaces mandated by typography rules in many
languages). If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is used, only
<code class="docutils literal"><span class="pre">[</span> <span class="pre">\t\n\r\f\v]</span></code> is matched (but the flag affects the entire
regular expression, so in such cases using an explicit
<code class="docutils literal"><span class="pre">[</span> <span class="pre">\t\n\r\f\v]</span></code> may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches characters considered whitespace in the ASCII character set;
this is equivalent to <code class="docutils literal"><span class="pre">[</span> <span class="pre">\t\n\r\f\v]</span></code>.</dd>
</dl>
</dd>
<dt><code class="docutils literal"><span class="pre">\S</span></code></dt>
<dd>Matches any character which is not a Unicode whitespace character. This is
the opposite of <code class="docutils literal"><span class="pre">\s</span></code>. If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is used this
becomes the equivalent of <code class="docutils literal"><span class="pre">[^</span> <span class="pre">\t\n\r\f\v]</span></code> (but the flag affects the entire
regular expression, so in such cases using an explicit <code class="docutils literal"><span class="pre">[^</span> <span class="pre">\t\n\r\f\v]</span></code> may
be a better choice).</dd>
<dt><code class="docutils literal"><span class="pre">\w</span></code></dt>
<dd><dl class="first last docutils">
<dt>For Unicode (str) patterns:</dt>
<dd>Matches Unicode word characters; this includes most characters
that can be part of a word in any language, as well as numbers and
the underscore. If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is used, only
<code class="docutils literal"><span class="pre">[a-zA-Z0-9_]</span></code> is matched (but the flag affects the entire
regular expression, so in such cases using an explicit
<code class="docutils literal"><span class="pre">[a-zA-Z0-9_]</span></code> may be a better choice).</dd>
<dt>For 8-bit (bytes) patterns:</dt>
<dd>Matches characters considered alphanumeric in the ASCII character set;
this is equivalent to <code class="docutils literal"><span class="pre">[a-zA-Z0-9_]</span></code>.</dd>
</dl>
</dd>
<dt><code class="docutils literal"><span class="pre">\W</span></code></dt>
<dd>Matches any character which is not a Unicode word character. This is
the opposite of <code class="docutils literal"><span class="pre">\w</span></code>. If the <a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">ASCII</span></code></a> flag is used this
becomes the equivalent of <code class="docutils literal"><span class="pre">[^a-zA-Z0-9_]</span></code> (but the flag affects the
entire regular expression, so in such cases using an explicit
<code class="docutils literal"><span class="pre">[^a-zA-Z0-9_]</span></code> may be a better choice).</dd>
<dt><code class="docutils literal"><span class="pre">\Z</span></code></dt>
<dd>Matches only at the end of the string.</dd>
</dl>
<p>Most of the standard escapes supported by Python string literals are also
accepted by the regular expression parser:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span>\<span class="n">a</span>      \<span class="n">b</span>      \<span class="n">f</span>      \<span class="n">n</span>
\<span class="n">r</span>      \<span class="n">t</span>      \<span class="n">u</span>      \<span class="n">U</span>
\<span class="n">v</span>      \<span class="n">x</span>      \\
</pre></div>
</div>
<p>(Note that <code class="docutils literal"><span class="pre">\b</span></code> is used to represent word boundaries, and means &#8220;backspace&#8221;
only inside character classes.)</p>
<p><code class="docutils literal"><span class="pre">'\u'</span></code> and <code class="docutils literal"><span class="pre">'\U'</span></code> escape sequences are only recognized in Unicode
patterns.  In bytes patterns they are not treated specially.</p>
<p>Octal escapes are included in a limited form.  If the first digit is a 0, or if
there are three octal digits, it is considered an octal escape. Otherwise, it is
a group reference.  As for string literals, octal escapes are always at most
three digits in length.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>The <code class="docutils literal"><span class="pre">'\u'</span></code> and <code class="docutils literal"><span class="pre">'\U'</span></code> escape sequences have been added.</p>
</div>
<div class="deprecated-removed">
<p><span class="versionmodified">Deprecated since version 3.5, will be removed in version 3.6: </span>Unknown escapes consist of <code class="docutils literal"><span class="pre">'\'</span></code> and ASCII letter now raise a
deprecation warning and will be forbidden in Python 3.6.</p>
</div>
<div class="admonition seealso">
<p class="first admonition-title">See also</p>
<dl class="last docutils">
<dt>Mastering Regular Expressions</dt>
<dd>Book on regular expressions by Jeffrey Friedl, published by O&#8217;Reilly.  The
second edition of the book no longer covers Python at all, but the first
edition covered writing good regular expression patterns in great detail.</dd>
</dl>
</div>
</div>
<div class="section" id="module-contents">
<span id="contents-of-module-re"></span><h2>6.2.2. Module Contents<a class="headerlink" href="#module-contents" title="Permalink to this headline">¶</a></h2>
<p>The module defines several functions, constants, and an exception. Some of the
functions are simplified versions of the full featured methods for compiled
regular expressions.  Most non-trivial applications always use the compiled
form.</p>
<dl class="function">
<dt id="re.compile">
<code class="descclassname">re.</code><code class="descname">compile</code><span class="sig-paren">(</span><em>pattern</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.compile" title="Permalink to this definition">¶</a></dt>
<dd><p>Compile a regular expression pattern into a regular expression object, which
can be used for matching using its <a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-func docutils literal"><span class="pre">match()</span></code></a> and
<a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a> methods, described below.</p>
<p>The expression&#8217;s behaviour can be modified by specifying a <em>flags</em> value.
Values can be any of the following variables, combined using bitwise OR (the
<code class="docutils literal"><span class="pre">|</span></code> operator).</p>
<p>The sequence</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">prog</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">prog</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</pre></div>
</div>
<p>is equivalent to</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
</pre></div>
</div>
<p>but using <a class="reference internal" href="#re.compile" title="re.compile"><code class="xref py py-func docutils literal"><span class="pre">re.compile()</span></code></a> and saving the resulting regular expression
object for reuse is more efficient when the expression will be used several
times in a single program.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The compiled versions of the most recent patterns passed to
<a class="reference internal" href="#re.compile" title="re.compile"><code class="xref py py-func docutils literal"><span class="pre">re.compile()</span></code></a> and the module-level matching functions are cached, so
programs that use only a few regular expressions at a time needn&#8217;t worry
about compiling regular expressions.</p>
</div>
</dd></dl>

<dl class="data">
<dt id="re.A">
<code class="descclassname">re.</code><code class="descname">A</code><a class="headerlink" href="#re.A" title="Permalink to this definition">¶</a></dt>
<dt id="re.ASCII">
<code class="descclassname">re.</code><code class="descname">ASCII</code><a class="headerlink" href="#re.ASCII" title="Permalink to this definition">¶</a></dt>
<dd><p>Make <code class="docutils literal"><span class="pre">\w</span></code>, <code class="docutils literal"><span class="pre">\W</span></code>, <code class="docutils literal"><span class="pre">\b</span></code>, <code class="docutils literal"><span class="pre">\B</span></code>, <code class="docutils literal"><span class="pre">\d</span></code>, <code class="docutils literal"><span class="pre">\D</span></code>, <code class="docutils literal"><span class="pre">\s</span></code> and <code class="docutils literal"><span class="pre">\S</span></code>
perform ASCII-only matching instead of full Unicode matching.  This is only
meaningful for Unicode patterns, and is ignored for byte patterns.</p>
<p>Note that for backward compatibility, the <code class="xref py py-const docutils literal"><span class="pre">re.U</span></code> flag still
exists (as well as its synonym <code class="xref py py-const docutils literal"><span class="pre">re.UNICODE</span></code> and its embedded
counterpart <code class="docutils literal"><span class="pre">(?u)</span></code>), but these are redundant in Python 3 since
matches are Unicode by default for strings (and Unicode matching
isn&#8217;t allowed for bytes).</p>
</dd></dl>

<dl class="data">
<dt id="re.DEBUG">
<code class="descclassname">re.</code><code class="descname">DEBUG</code><a class="headerlink" href="#re.DEBUG" title="Permalink to this definition">¶</a></dt>
<dd><p>Display debug information about compiled expression.</p>
</dd></dl>

<dl class="data">
<dt id="re.I">
<code class="descclassname">re.</code><code class="descname">I</code><a class="headerlink" href="#re.I" title="Permalink to this definition">¶</a></dt>
<dt id="re.IGNORECASE">
<code class="descclassname">re.</code><code class="descname">IGNORECASE</code><a class="headerlink" href="#re.IGNORECASE" title="Permalink to this definition">¶</a></dt>
<dd><p>Perform case-insensitive matching; expressions like <code class="docutils literal"><span class="pre">[A-Z]</span></code> will match
lowercase letters, too.  This is not affected by the current locale
and works for Unicode characters as expected.</p>
</dd></dl>

<dl class="data">
<dt id="re.L">
<code class="descclassname">re.</code><code class="descname">L</code><a class="headerlink" href="#re.L" title="Permalink to this definition">¶</a></dt>
<dt id="re.LOCALE">
<code class="descclassname">re.</code><code class="descname">LOCALE</code><a class="headerlink" href="#re.LOCALE" title="Permalink to this definition">¶</a></dt>
<dd><p>Make <code class="docutils literal"><span class="pre">\w</span></code>, <code class="docutils literal"><span class="pre">\W</span></code>, <code class="docutils literal"><span class="pre">\b</span></code>, <code class="docutils literal"><span class="pre">\B</span></code>, <code class="docutils literal"><span class="pre">\s</span></code> and <code class="docutils literal"><span class="pre">\S</span></code> dependent on the
current locale. The use of this flag is discouraged as the locale mechanism
is very unreliable, and it only handles one &#8220;culture&#8221; at a time anyway;
you should use Unicode matching instead, which is the default in Python 3
for Unicode (str) patterns. This flag makes sense only with bytes patterns.</p>
<div class="deprecated-removed">
<p><span class="versionmodified">Deprecated since version 3.5, will be removed in version 3.6: </span>Deprecated the use of  <a class="reference internal" href="#re.LOCALE" title="re.LOCALE"><code class="xref py py-const docutils literal"><span class="pre">re.LOCALE</span></code></a> with string patterns or
<a class="reference internal" href="#re.ASCII" title="re.ASCII"><code class="xref py py-const docutils literal"><span class="pre">re.ASCII</span></code></a>.</p>
</div>
</dd></dl>

<dl class="data">
<dt id="re.M">
<code class="descclassname">re.</code><code class="descname">M</code><a class="headerlink" href="#re.M" title="Permalink to this definition">¶</a></dt>
<dt id="re.MULTILINE">
<code class="descclassname">re.</code><code class="descname">MULTILINE</code><a class="headerlink" href="#re.MULTILINE" title="Permalink to this definition">¶</a></dt>
<dd><p>When specified, the pattern character <code class="docutils literal"><span class="pre">'^'</span></code> matches at the beginning of the
string and at the beginning of each line (immediately following each newline);
and the pattern character <code class="docutils literal"><span class="pre">'$'</span></code> matches at the end of the string and at the
end of each line (immediately preceding each newline).  By default, <code class="docutils literal"><span class="pre">'^'</span></code>
matches only at the beginning of the string, and <code class="docutils literal"><span class="pre">'$'</span></code> only at the end of the
string and immediately before the newline (if any) at the end of the string.</p>
</dd></dl>

<dl class="data">
<dt id="re.S">
<code class="descclassname">re.</code><code class="descname">S</code><a class="headerlink" href="#re.S" title="Permalink to this definition">¶</a></dt>
<dt id="re.DOTALL">
<code class="descclassname">re.</code><code class="descname">DOTALL</code><a class="headerlink" href="#re.DOTALL" title="Permalink to this definition">¶</a></dt>
<dd><p>Make the <code class="docutils literal"><span class="pre">'.'</span></code> special character match any character at all, including a
newline; without this flag, <code class="docutils literal"><span class="pre">'.'</span></code> will match anything <em>except</em> a newline.</p>
</dd></dl>

<dl class="data">
<dt id="re.X">
<code class="descclassname">re.</code><code class="descname">X</code><a class="headerlink" href="#re.X" title="Permalink to this definition">¶</a></dt>
<dt id="re.VERBOSE">
<code class="descclassname">re.</code><code class="descname">VERBOSE</code><a class="headerlink" href="#re.VERBOSE" title="Permalink to this definition">¶</a></dt>
<dd><p>This flag allows you to write regular expressions that look nicer and are
more readable by allowing you to visually separate logical sections of the
pattern and add comments. Whitespace within the pattern is ignored, except
when in a character class or when preceded by an unescaped backslash.
When a line contains a <code class="docutils literal"><span class="pre">#</span></code> that is not in a character class and is not
preceded by an unescaped backslash, all characters from the leftmost such
<code class="docutils literal"><span class="pre">#</span></code> through the end of the line are ignored.</p>
<p>This means that the two following regular expression objects that match a
decimal number are functionally equal:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">a</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">r&quot;&quot;&quot;\d +  # the integral part</span>
<span class="s2">                   \.    # the decimal point</span>
<span class="s2">                   \d *  # some fractional digits&quot;&quot;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">X</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">r&quot;\d+\.\d*&quot;</span><span class="p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="re.search">
<code class="descclassname">re.</code><code class="descname">search</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.search" title="Permalink to this definition">¶</a></dt>
<dd><p>Scan through <em>string</em> looking for the first location where the regular expression
<em>pattern</em> produces a match, and return a corresponding <a class="reference internal" href="#match-objects"><span>match object</span></a>.  Return <code class="docutils literal"><span class="pre">None</span></code> if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.</p>
</dd></dl>

<dl class="function">
<dt id="re.match">
<code class="descclassname">re.</code><code class="descname">match</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.match" title="Permalink to this definition">¶</a></dt>
<dd><p>If zero or more characters at the beginning of <em>string</em> match the regular
expression <em>pattern</em>, return a corresponding <a class="reference internal" href="#match-objects"><span>match object</span></a>.  Return <code class="docutils literal"><span class="pre">None</span></code> if the string does not match the pattern;
note that this is different from a zero-length match.</p>
<p>Note that even in <a class="reference internal" href="#re.MULTILINE" title="re.MULTILINE"><code class="xref py py-const docutils literal"><span class="pre">MULTILINE</span></code></a> mode, <a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-func docutils literal"><span class="pre">re.match()</span></code></a> will only match
at the beginning of the string and not at the beginning of each line.</p>
<p>If you want to locate a match anywhere in <em>string</em>, use <a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a>
instead (see also <a class="reference internal" href="#search-vs-match"><span>search() vs. match()</span></a>).</p>
</dd></dl>

<dl class="function">
<dt id="re.fullmatch">
<code class="descclassname">re.</code><code class="descname">fullmatch</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.fullmatch" title="Permalink to this definition">¶</a></dt>
<dd><p>If the whole <em>string</em> matches the regular expression <em>pattern</em>, return a
corresponding <a class="reference internal" href="#match-objects"><span>match object</span></a>.  Return <code class="docutils literal"><span class="pre">None</span></code> if the
string does not match the pattern; note that this is different from a
zero-length match.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="function">
<dt id="re.split">
<code class="descclassname">re.</code><code class="descname">split</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>maxsplit=0</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.split" title="Permalink to this definition">¶</a></dt>
<dd><p>Split <em>string</em> by the occurrences of <em>pattern</em>.  If capturing parentheses are
used in <em>pattern</em>, then the text of all groups in the pattern are also returned
as part of the resulting list. If <em>maxsplit</em> is nonzero, at most <em>maxsplit</em>
splits occur, and the remainder of the string is returned as the final element
of the list.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;\W+&#39;</span><span class="p">,</span> <span class="s1">&#39;Words, words, words.&#39;</span><span class="p">)</span>
<span class="go">[&#39;Words&#39;, &#39;words&#39;, &#39;words&#39;, &#39;&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;(\W+)&#39;</span><span class="p">,</span> <span class="s1">&#39;Words, words, words.&#39;</span><span class="p">)</span>
<span class="go">[&#39;Words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;.&#39;, &#39;&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;\W+&#39;</span><span class="p">,</span> <span class="s1">&#39;Words, words, words.&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="go">[&#39;Words&#39;, &#39;words, words.&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;[a-f]+&#39;</span><span class="p">,</span> <span class="s1">&#39;0a3B9&#39;</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="go">[&#39;0&#39;, &#39;3&#39;, &#39;9&#39;]</span>
</pre></div>
</div>
<p>If there are capturing groups in the separator and it matches at the start of
the string, the result will start with an empty string.  The same holds for
the end of the string:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;(\W+)&#39;</span><span class="p">,</span> <span class="s1">&#39;...words, words...&#39;</span><span class="p">)</span>
<span class="go">[&#39;&#39;, &#39;...&#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;...&#39;, &#39;&#39;]</span>
</pre></div>
</div>
<p>That way, separator components are always found at the same relative
indices within the result list.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p><a class="reference internal" href="#re.split" title="re.split"><code class="xref py py-func docutils literal"><span class="pre">split()</span></code></a> doesn&#8217;t currently split a string on an empty pattern match.
For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;x*&#39;</span><span class="p">,</span> <span class="s1">&#39;axbc&#39;</span><span class="p">)</span>
<span class="go">[&#39;a&#39;, &#39;bc&#39;]</span>
</pre></div>
</div>
<p>Even though <code class="docutils literal"><span class="pre">'x*'</span></code> also matches 0 &#8216;x&#8217; before &#8216;a&#8217;, between &#8216;b&#8217; and &#8216;c&#8217;,
and after &#8216;c&#8217;, currently these matches are ignored.  The correct behavior
(i.e. splitting on empty matches too and returning <code class="docutils literal"><span class="pre">['',</span> <span class="pre">'a',</span> <span class="pre">'b',</span> <span class="pre">'c',</span>
<span class="pre">'']</span></code>) will be implemented in future versions of Python, but since this
is a backward incompatible change, a <a class="reference internal" href="exceptions.html#FutureWarning" title="FutureWarning"><code class="xref py py-exc docutils literal"><span class="pre">FutureWarning</span></code></a> will be raised
in the meanwhile.</p>
<p>Patterns that can only match empty strings currently never split the
string.  Since this doesn&#8217;t match the expected behavior, a
<a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal"><span class="pre">ValueError</span></code></a> will be raised starting from Python 3.5:</p>
<div class="last highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;^$&quot;</span><span class="p">,</span> <span class="s2">&quot;foo</span><span class="se">\n\n</span><span class="s2">bar</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">M</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
  <span class="c">...</span>
<span class="gr">ValueError</span>: <span class="n">split() requires a non-empty pattern match.</span>
</pre></div>
</div>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span>Added the optional flags argument.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Splitting on a pattern that could match an empty string now raises
a warning.  Patterns that can only match empty strings are now rejected.</p>
</div>
</dd></dl>

<dl class="function">
<dt id="re.findall">
<code class="descclassname">re.</code><code class="descname">findall</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.findall" title="Permalink to this definition">¶</a></dt>
<dd><p>Return all non-overlapping matches of <em>pattern</em> in <em>string</em>, as a list of
strings.  The <em>string</em> is scanned left-to-right, and matches are returned in
the order found.  If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern has more than
one group.  Empty matches are included in the result unless they touch the
beginning of another match.</p>
</dd></dl>

<dl class="function">
<dt id="re.finditer">
<code class="descclassname">re.</code><code class="descname">finditer</code><span class="sig-paren">(</span><em>pattern</em>, <em>string</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.finditer" title="Permalink to this definition">¶</a></dt>
<dd><p>Return an <a class="reference internal" href="../glossary.html#term-iterator"><span class="xref std std-term">iterator</span></a> yielding <a class="reference internal" href="#match-objects"><span>match objects</span></a> over
all non-overlapping matches for the RE <em>pattern</em> in <em>string</em>.  The <em>string</em>
is scanned left-to-right, and matches are returned in the order found.  Empty
matches are included in the result unless they touch the beginning of another
match.</p>
</dd></dl>

<dl class="function">
<dt id="re.sub">
<code class="descclassname">re.</code><code class="descname">sub</code><span class="sig-paren">(</span><em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.sub" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the string obtained by replacing the leftmost non-overlapping occurrences
of <em>pattern</em> in <em>string</em> by the replacement <em>repl</em>.  If the pattern isn&#8217;t found,
<em>string</em> is returned unchanged.  <em>repl</em> can be a string or a function; if it is
a string, any backslash escapes in it are processed.  That is, <code class="docutils literal"><span class="pre">\n</span></code> is
converted to a single newline character, <code class="docutils literal"><span class="pre">\r</span></code> is converted to a carriage return, and
so forth.  Unknown escapes such as <code class="docutils literal"><span class="pre">\&amp;</span></code> are left alone.  Backreferences, such
as <code class="docutils literal"><span class="pre">\6</span></code>, are replaced with the substring matched by group 6 in the pattern.
For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">r&#39;def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):&#39;</span><span class="p">,</span>
<span class="gp">... </span>       <span class="s1">r&#39;static PyObject*\npy_\1(void)\n{&#39;</span><span class="p">,</span>
<span class="gp">... </span>       <span class="s1">&#39;def myfunc():&#39;</span><span class="p">)</span>
<span class="go">&#39;static PyObject*\npy_myfunc(void)\n{&#39;</span>
</pre></div>
</div>
<p>If <em>repl</em> is a function, it is called for every non-overlapping occurrence of
<em>pattern</em>.  The function takes a single match object argument, and returns the
replacement string.  For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">dashrepl</span><span class="p">(</span><span class="n">matchobj</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">matchobj</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span><span class="p">:</span> <span class="k">return</span> <span class="s1">&#39; &#39;</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="s1">&#39;-&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;-{1,2}&#39;</span><span class="p">,</span> <span class="n">dashrepl</span><span class="p">,</span> <span class="s1">&#39;pro----gram-files&#39;</span><span class="p">)</span>
<span class="go">&#39;pro--gram files&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">r&#39;\sAND\s&#39;</span><span class="p">,</span> <span class="s1">&#39; &amp; &#39;</span><span class="p">,</span> <span class="s1">&#39;Baked Beans And Spam&#39;</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="go">&#39;Baked Beans &amp; Spam&#39;</span>
</pre></div>
</div>
<p>The pattern may be a string or an RE object.</p>
<p>The optional argument <em>count</em> is the maximum number of pattern occurrences to be
replaced; <em>count</em> must be a non-negative integer.  If omitted or zero, all
occurrences will be replaced. Empty matches for the pattern are replaced only
when not adjacent to a previous match, so <code class="docutils literal"><span class="pre">sub('x*',</span> <span class="pre">'-',</span> <span class="pre">'abc')</span></code> returns
<code class="docutils literal"><span class="pre">'-a-b-c-'</span></code>.</p>
<p>In string-type <em>repl</em> arguments, in addition to the character escapes and
backreferences described above,
<code class="docutils literal"><span class="pre">\g&lt;name&gt;</span></code> will use the substring matched by the group named <code class="docutils literal"><span class="pre">name</span></code>, as
defined by the <code class="docutils literal"><span class="pre">(?P&lt;name&gt;...)</span></code> syntax. <code class="docutils literal"><span class="pre">\g&lt;number&gt;</span></code> uses the corresponding
group number; <code class="docutils literal"><span class="pre">\g&lt;2&gt;</span></code> is therefore equivalent to <code class="docutils literal"><span class="pre">\2</span></code>, but isn&#8217;t ambiguous
in a replacement such as <code class="docutils literal"><span class="pre">\g&lt;2&gt;0</span></code>.  <code class="docutils literal"><span class="pre">\20</span></code> would be interpreted as a
reference to group 20, not a reference to group 2 followed by the literal
character <code class="docutils literal"><span class="pre">'0'</span></code>.  The backreference <code class="docutils literal"><span class="pre">\g&lt;0&gt;</span></code> substitutes in the entire
substring matched by the RE.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span>Added the optional flags argument.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p>
</div>
<div class="deprecated-removed">
<p><span class="versionmodified">Deprecated since version 3.5, will be removed in version 3.6: </span>Unknown escapes consist of <code class="docutils literal"><span class="pre">'\'</span></code> and ASCII letter now raise a
deprecation warning and will be forbidden in Python 3.6.</p>
</div>
</dd></dl>

<dl class="function">
<dt id="re.subn">
<code class="descclassname">re.</code><code class="descname">subn</code><span class="sig-paren">(</span><em>pattern</em>, <em>repl</em>, <em>string</em>, <em>count=0</em>, <em>flags=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.subn" title="Permalink to this definition">¶</a></dt>
<dd><p>Perform the same operation as <a class="reference internal" href="#re.sub" title="re.sub"><code class="xref py py-func docutils literal"><span class="pre">sub()</span></code></a>, but return a tuple <code class="docutils literal"><span class="pre">(new_string,</span>
<span class="pre">number_of_subs_made)</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.1: </span>Added the optional flags argument.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p>
</div>
</dd></dl>

<dl class="function">
<dt id="re.escape">
<code class="descclassname">re.</code><code class="descname">escape</code><span class="sig-paren">(</span><em>string</em><span class="sig-paren">)</span><a class="headerlink" href="#re.escape" title="Permalink to this definition">¶</a></dt>
<dd><p>Escape all the characters in pattern except ASCII letters, numbers and <code class="docutils literal"><span class="pre">'_'</span></code>.
This is useful if you want to match an arbitrary literal string that may
have regular expression metacharacters in it.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.3: </span>The <code class="docutils literal"><span class="pre">'_'</span></code> character is no longer escaped.</p>
</div>
</dd></dl>

<dl class="function">
<dt id="re.purge">
<code class="descclassname">re.</code><code class="descname">purge</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#re.purge" title="Permalink to this definition">¶</a></dt>
<dd><p>Clear the regular expression cache.</p>
</dd></dl>

<dl class="exception">
<dt id="re.error">
<em class="property">exception </em><code class="descclassname">re.</code><code class="descname">error</code><span class="sig-paren">(</span><em>msg</em>, <em>pattern=None</em>, <em>pos=None</em><span class="sig-paren">)</span><a class="headerlink" href="#re.error" title="Permalink to this definition">¶</a></dt>
<dd><p>Exception raised when a string passed to one of the functions here is not a
valid regular expression (for example, it might contain unmatched parentheses)
or when some other error occurs during compilation or matching.  It is never an
error if a string contains no match for a pattern.  The error instance has
the following additional attributes:</p>
<dl class="attribute">
<dt id="re.error.msg">
<code class="descname">msg</code><a class="headerlink" href="#re.error.msg" title="Permalink to this definition">¶</a></dt>
<dd><p>The unformatted error message.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.error.pattern">
<code class="descname">pattern</code><a class="headerlink" href="#re.error.pattern" title="Permalink to this definition">¶</a></dt>
<dd><p>The regular expression pattern.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.error.pos">
<code class="descname">pos</code><a class="headerlink" href="#re.error.pos" title="Permalink to this definition">¶</a></dt>
<dd><p>The index of <em>pattern</em> where compilation failed.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.error.lineno">
<code class="descname">lineno</code><a class="headerlink" href="#re.error.lineno" title="Permalink to this definition">¶</a></dt>
<dd><p>The line corresponding to <em>pos</em>.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.error.colno">
<code class="descname">colno</code><a class="headerlink" href="#re.error.colno" title="Permalink to this definition">¶</a></dt>
<dd><p>The column corresponding to <em>pos</em>.</p>
</dd></dl>

<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Added additional attributes.</p>
</div>
</dd></dl>

</div>
<div class="section" id="regular-expression-objects">
<span id="re-objects"></span><h2>6.2.3. Regular Expression Objects<a class="headerlink" href="#regular-expression-objects" title="Permalink to this headline">¶</a></h2>
<p>Compiled regular expression objects support the following methods and
attributes:</p>
<dl class="method">
<dt id="re.regex.search">
<code class="descclassname">regex.</code><code class="descname">search</code><span class="sig-paren">(</span><em>string</em><span class="optional">[</span>, <em>pos</em><span class="optional">[</span>, <em>endpos</em><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.search" title="Permalink to this definition">¶</a></dt>
<dd><p>Scan through <em>string</em> looking for a location where this regular expression
produces a match, and return a corresponding <a class="reference internal" href="#match-objects"><span>match object</span></a>.  Return <code class="docutils literal"><span class="pre">None</span></code> if no position in the string matches the
pattern; note that this is different from finding a zero-length match at some
point in the string.</p>
<p>The optional second parameter <em>pos</em> gives an index in the string where the
search is to start; it defaults to <code class="docutils literal"><span class="pre">0</span></code>.  This is not completely equivalent to
slicing the string; the <code class="docutils literal"><span class="pre">'^'</span></code> pattern character matches at the real beginning
of the string and at positions just after a newline, but not necessarily at the
index where the search is to start.</p>
<p>The optional parameter <em>endpos</em> limits how far the string will be searched; it
will be as if the string is <em>endpos</em> characters long, so only the characters
from <em>pos</em> to <code class="docutils literal"><span class="pre">endpos</span> <span class="pre">-</span> <span class="pre">1</span></code> will be searched for a match.  If <em>endpos</em> is less
than <em>pos</em>, no match will be found; otherwise, if <em>rx</em> is a compiled regular
expression object, <code class="docutils literal"><span class="pre">rx.search(string,</span> <span class="pre">0,</span> <span class="pre">50)</span></code> is equivalent to
<code class="docutils literal"><span class="pre">rx.search(string[:50],</span> <span class="pre">0)</span></code>.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;d&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;dog&quot;</span><span class="p">)</span>     <span class="c1"># Match at index 0</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 1), match=&#39;d&#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;dog&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># No match; search doesn&#39;t include the &quot;d&quot;</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="re.regex.match">
<code class="descclassname">regex.</code><code class="descname">match</code><span class="sig-paren">(</span><em>string</em><span class="optional">[</span>, <em>pos</em><span class="optional">[</span>, <em>endpos</em><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.match" title="Permalink to this definition">¶</a></dt>
<dd><p>If zero or more characters at the <em>beginning</em> of <em>string</em> match this regular
expression, return a corresponding <a class="reference internal" href="#match-objects"><span>match object</span></a>.
Return <code class="docutils literal"><span class="pre">None</span></code> if the string does not match the pattern; note that this is
different from a zero-length match.</p>
<p>The optional <em>pos</em> and <em>endpos</em> parameters have the same meaning as for the
<a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> method.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;o&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;dog&quot;</span><span class="p">)</span>      <span class="c1"># No match as &quot;o&quot; is not at the start of &quot;dog&quot;.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;dog&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1"># Match as &quot;o&quot; is the 2nd character of &quot;dog&quot;.</span>
<span class="go">&lt;_sre.SRE_Match object; span=(1, 2), match=&#39;o&#39;&gt;</span>
</pre></div>
</div>
<p>If you want to locate a match anywhere in <em>string</em>, use
<a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> instead (see also <a class="reference internal" href="#search-vs-match"><span>search() vs. match()</span></a>).</p>
</dd></dl>

<dl class="method">
<dt id="re.regex.fullmatch">
<code class="descclassname">regex.</code><code class="descname">fullmatch</code><span class="sig-paren">(</span><em>string</em><span class="optional">[</span>, <em>pos</em><span class="optional">[</span>, <em>endpos</em><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.fullmatch" title="Permalink to this definition">¶</a></dt>
<dd><p>If the whole <em>string</em> matches this regular expression, return a corresponding
<a class="reference internal" href="#match-objects"><span>match object</span></a>.  Return <code class="docutils literal"><span class="pre">None</span></code> if the string does not
match the pattern; note that this is different from a zero-length match.</p>
<p>The optional <em>pos</em> and <em>endpos</em> parameters have the same meaning as for the
<a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> method.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;o[gh]&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="s2">&quot;dog&quot;</span><span class="p">)</span>      <span class="c1"># No match as &quot;o&quot; is not at the start of &quot;dog&quot;.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="s2">&quot;ogre&quot;</span><span class="p">)</span>     <span class="c1"># No match as not the full string matches.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pattern</span><span class="o">.</span><span class="n">fullmatch</span><span class="p">(</span><span class="s2">&quot;doggie&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>   <span class="c1"># Matches within given limits.</span>
<span class="go">&lt;_sre.SRE_Match object; span=(1, 3), match=&#39;og&#39;&gt;</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class="method">
<dt id="re.regex.split">
<code class="descclassname">regex.</code><code class="descname">split</code><span class="sig-paren">(</span><em>string</em>, <em>maxsplit=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.split" title="Permalink to this definition">¶</a></dt>
<dd><p>Identical to the <a class="reference internal" href="#re.split" title="re.split"><code class="xref py py-func docutils literal"><span class="pre">split()</span></code></a> function, using the compiled pattern.</p>
</dd></dl>

<dl class="method">
<dt id="re.regex.findall">
<code class="descclassname">regex.</code><code class="descname">findall</code><span class="sig-paren">(</span><em>string</em><span class="optional">[</span>, <em>pos</em><span class="optional">[</span>, <em>endpos</em><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.findall" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to the <a class="reference internal" href="#re.findall" title="re.findall"><code class="xref py py-func docutils literal"><span class="pre">findall()</span></code></a> function, using the compiled pattern, but
also accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search
region like for <a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a>.</p>
</dd></dl>

<dl class="method">
<dt id="re.regex.finditer">
<code class="descclassname">regex.</code><code class="descname">finditer</code><span class="sig-paren">(</span><em>string</em><span class="optional">[</span>, <em>pos</em><span class="optional">[</span>, <em>endpos</em><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.finditer" title="Permalink to this definition">¶</a></dt>
<dd><p>Similar to the <a class="reference internal" href="#re.finditer" title="re.finditer"><code class="xref py py-func docutils literal"><span class="pre">finditer()</span></code></a> function, using the compiled pattern, but
also accepts optional <em>pos</em> and <em>endpos</em> parameters that limit the search
region like for <a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a>.</p>
</dd></dl>

<dl class="method">
<dt id="re.regex.sub">
<code class="descclassname">regex.</code><code class="descname">sub</code><span class="sig-paren">(</span><em>repl</em>, <em>string</em>, <em>count=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.sub" title="Permalink to this definition">¶</a></dt>
<dd><p>Identical to the <a class="reference internal" href="#re.sub" title="re.sub"><code class="xref py py-func docutils literal"><span class="pre">sub()</span></code></a> function, using the compiled pattern.</p>
</dd></dl>

<dl class="method">
<dt id="re.regex.subn">
<code class="descclassname">regex.</code><code class="descname">subn</code><span class="sig-paren">(</span><em>repl</em>, <em>string</em>, <em>count=0</em><span class="sig-paren">)</span><a class="headerlink" href="#re.regex.subn" title="Permalink to this definition">¶</a></dt>
<dd><p>Identical to the <a class="reference internal" href="#re.subn" title="re.subn"><code class="xref py py-func docutils literal"><span class="pre">subn()</span></code></a> function, using the compiled pattern.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.regex.flags">
<code class="descclassname">regex.</code><code class="descname">flags</code><a class="headerlink" href="#re.regex.flags" title="Permalink to this definition">¶</a></dt>
<dd><p>The regex matching flags.  This is a combination of the flags given to
<a class="reference internal" href="#re.compile" title="re.compile"><code class="xref py py-func docutils literal"><span class="pre">compile()</span></code></a>, any <code class="docutils literal"><span class="pre">(?...)</span></code> inline flags in the pattern, and implicit
flags such as <code class="xref py py-data docutils literal"><span class="pre">UNICODE</span></code> if the pattern is a Unicode string.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.regex.groups">
<code class="descclassname">regex.</code><code class="descname">groups</code><a class="headerlink" href="#re.regex.groups" title="Permalink to this definition">¶</a></dt>
<dd><p>The number of capturing groups in the pattern.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.regex.groupindex">
<code class="descclassname">regex.</code><code class="descname">groupindex</code><a class="headerlink" href="#re.regex.groupindex" title="Permalink to this definition">¶</a></dt>
<dd><p>A dictionary mapping any symbolic group names defined by <code class="docutils literal"><span class="pre">(?P&lt;id&gt;)</span></code> to group
numbers.  The dictionary is empty if no symbolic groups were used in the
pattern.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.regex.pattern">
<code class="descclassname">regex.</code><code class="descname">pattern</code><a class="headerlink" href="#re.regex.pattern" title="Permalink to this definition">¶</a></dt>
<dd><p>The pattern string from which the RE object was compiled.</p>
</dd></dl>

</div>
<div class="section" id="match-objects">
<span id="id1"></span><h2>6.2.4. Match Objects<a class="headerlink" href="#match-objects" title="Permalink to this headline">¶</a></h2>
<p>Match objects always have a boolean value of <code class="docutils literal"><span class="pre">True</span></code>.
Since <a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a> and <a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> return <code class="docutils literal"><span class="pre">None</span></code>
when there is no match, you can test whether there was a match with a simple
<code class="docutils literal"><span class="pre">if</span></code> statement:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
<span class="k">if</span> <span class="n">match</span><span class="p">:</span>
    <span class="n">process</span><span class="p">(</span><span class="n">match</span><span class="p">)</span>
</pre></div>
</div>
<p>Match objects support the following methods and attributes:</p>
<dl class="method">
<dt id="re.match.expand">
<code class="descclassname">match.</code><code class="descname">expand</code><span class="sig-paren">(</span><em>template</em><span class="sig-paren">)</span><a class="headerlink" href="#re.match.expand" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the string obtained by doing backslash substitution on the template
string <em>template</em>, as done by the <a class="reference internal" href="#re.regex.sub" title="re.regex.sub"><code class="xref py py-meth docutils literal"><span class="pre">sub()</span></code></a> method.
Escapes such as <code class="docutils literal"><span class="pre">\n</span></code> are converted to the appropriate characters,
and numeric backreferences (<code class="docutils literal"><span class="pre">\1</span></code>, <code class="docutils literal"><span class="pre">\2</span></code>) and named backreferences
(<code class="docutils literal"><span class="pre">\g&lt;1&gt;</span></code>, <code class="docutils literal"><span class="pre">\g&lt;name&gt;</span></code>) are replaced by the contents of the
corresponding group.</p>
<div class="versionchanged">
<p><span class="versionmodified">Changed in version 3.5: </span>Unmatched groups are replaced with an empty string.</p>
</div>
</dd></dl>

<dl class="method">
<dt id="re.match.group">
<code class="descclassname">match.</code><code class="descname">group</code><span class="sig-paren">(</span><span class="optional">[</span><em>group1</em>, <em>...</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.match.group" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns one or more subgroups of the match.  If there is a single argument, the
result is a single string; if there are multiple arguments, the result is a
tuple with one item per argument. Without arguments, <em>group1</em> defaults to zero
(the whole match is returned). If a <em>groupN</em> argument is zero, the corresponding
return value is the entire matching string; if it is in the inclusive range
[1..99], it is the string matching the corresponding parenthesized group.  If a
group number is negative or larger than the number of groups defined in the
pattern, an <a class="reference internal" href="exceptions.html#IndexError" title="IndexError"><code class="xref py py-exc docutils literal"><span class="pre">IndexError</span></code></a> exception is raised. If a group is contained in a
part of the pattern that did not match, the corresponding result is <code class="docutils literal"><span class="pre">None</span></code>.
If a group is contained in a part of the pattern that matched multiple times,
the last match is returned.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(\w+) (\w+)&quot;</span><span class="p">,</span> <span class="s2">&quot;Isaac Newton, physicist&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>       <span class="c1"># The entire match</span>
<span class="go">&#39;Isaac Newton&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>       <span class="c1"># The first parenthesized subgroup.</span>
<span class="go">&#39;Isaac&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>       <span class="c1"># The second parenthesized subgroup.</span>
<span class="go">&#39;Newton&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>    <span class="c1"># Multiple arguments give us a tuple.</span>
<span class="go">(&#39;Isaac&#39;, &#39;Newton&#39;)</span>
</pre></div>
</div>
<p>If the regular expression uses the <code class="docutils literal"><span class="pre">(?P&lt;name&gt;...)</span></code> syntax, the <em>groupN</em>
arguments may also be strings identifying groups by their group name.  If a
string argument is not used as a group name in the pattern, an <a class="reference internal" href="exceptions.html#IndexError" title="IndexError"><code class="xref py py-exc docutils literal"><span class="pre">IndexError</span></code></a>
exception is raised.</p>
<p>A moderately complicated example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;</span><span class="p">,</span> <span class="s2">&quot;Malcolm Reynolds&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;first_name&#39;</span><span class="p">)</span>
<span class="go">&#39;Malcolm&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s1">&#39;last_name&#39;</span><span class="p">)</span>
<span class="go">&#39;Reynolds&#39;</span>
</pre></div>
</div>
<p>Named groups can also be referred to by their index:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">&#39;Malcolm&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="go">&#39;Reynolds&#39;</span>
</pre></div>
</div>
<p>If a group matches multiple times, only the last match is accessible:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(..)+&quot;</span><span class="p">,</span> <span class="s2">&quot;a1b2c3&quot;</span><span class="p">)</span>  <span class="c1"># Matches 3 times.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                        <span class="c1"># Returns only the last match.</span>
<span class="go">&#39;c3&#39;</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="re.match.groups">
<code class="descclassname">match.</code><code class="descname">groups</code><span class="sig-paren">(</span><em>default=None</em><span class="sig-paren">)</span><a class="headerlink" href="#re.match.groups" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a tuple containing all the subgroups of the match, from 1 up to however
many groups are in the pattern.  The <em>default</em> argument is used for groups that
did not participate in the match; it defaults to <code class="docutils literal"><span class="pre">None</span></code>.</p>
<p>For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(\d+)\.(\d+)&quot;</span><span class="p">,</span> <span class="s2">&quot;24.1632&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
<span class="go">(&#39;24&#39;, &#39;1632&#39;)</span>
</pre></div>
</div>
<p>If we make the decimal place and everything after it optional, not all groups
might participate in the match.  These groups will default to <code class="docutils literal"><span class="pre">None</span></code> unless
the <em>default</em> argument is given:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(\d+)\.?(\d+)?&quot;</span><span class="p">,</span> <span class="s2">&quot;24&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>      <span class="c1"># Second group defaults to None.</span>
<span class="go">(&#39;24&#39;, None)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>   <span class="c1"># Now, the second group defaults to &#39;0&#39;.</span>
<span class="go">(&#39;24&#39;, &#39;0&#39;)</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="re.match.groupdict">
<code class="descclassname">match.</code><code class="descname">groupdict</code><span class="sig-paren">(</span><em>default=None</em><span class="sig-paren">)</span><a class="headerlink" href="#re.match.groupdict" title="Permalink to this definition">¶</a></dt>
<dd><p>Return a dictionary containing all the <em>named</em> subgroups of the match, keyed by
the subgroup name.  The <em>default</em> argument is used for groups that did not
participate in the match; it defaults to <code class="docutils literal"><span class="pre">None</span></code>.  For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;</span><span class="p">,</span> <span class="s2">&quot;Malcolm Reynolds&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">groupdict</span><span class="p">()</span>
<span class="go">{&#39;first_name&#39;: &#39;Malcolm&#39;, &#39;last_name&#39;: &#39;Reynolds&#39;}</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="re.match.start">
<code class="descclassname">match.</code><code class="descname">start</code><span class="sig-paren">(</span><span class="optional">[</span><em>group</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.match.start" title="Permalink to this definition">¶</a></dt>
<dt id="re.match.end">
<code class="descclassname">match.</code><code class="descname">end</code><span class="sig-paren">(</span><span class="optional">[</span><em>group</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.match.end" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the indices of the start and end of the substring matched by <em>group</em>;
<em>group</em> defaults to zero (meaning the whole matched substring). Return <code class="docutils literal"><span class="pre">-1</span></code> if
<em>group</em> exists but did not contribute to the match.  For a match object <em>m</em>, and
a group <em>g</em> that did contribute to the match, the substring matched by group <em>g</em>
(equivalent to <code class="docutils literal"><span class="pre">m.group(g)</span></code>) is</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">m</span><span class="o">.</span><span class="n">string</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">g</span><span class="p">):</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="n">g</span><span class="p">)]</span>
</pre></div>
</div>
<p>Note that <code class="docutils literal"><span class="pre">m.start(group)</span></code> will equal <code class="docutils literal"><span class="pre">m.end(group)</span></code> if <em>group</em> matched a
null string.  For example, after <code class="docutils literal"><span class="pre">m</span> <span class="pre">=</span> <span class="pre">re.search('b(c?)',</span> <span class="pre">'cba')</span></code>,
<code class="docutils literal"><span class="pre">m.start(0)</span></code> is 1, <code class="docutils literal"><span class="pre">m.end(0)</span></code> is 2, <code class="docutils literal"><span class="pre">m.start(1)</span></code> and <code class="docutils literal"><span class="pre">m.end(1)</span></code> are both
2, and <code class="docutils literal"><span class="pre">m.start(2)</span></code> raises an <a class="reference internal" href="exceptions.html#IndexError" title="IndexError"><code class="xref py py-exc docutils literal"><span class="pre">IndexError</span></code></a> exception.</p>
<p>An example that will remove <em>remove_this</em> from email addresses:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;tony@tiremove_thisger.net&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;remove_this&quot;</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">email</span><span class="p">[:</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">()]</span> <span class="o">+</span> <span class="n">email</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">():]</span>
<span class="go">&#39;tony@tiger.net&#39;</span>
</pre></div>
</div>
</dd></dl>

<dl class="method">
<dt id="re.match.span">
<code class="descclassname">match.</code><code class="descname">span</code><span class="sig-paren">(</span><span class="optional">[</span><em>group</em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#re.match.span" title="Permalink to this definition">¶</a></dt>
<dd><p>For a match <em>m</em>, return the 2-tuple <code class="docutils literal"><span class="pre">(m.start(group),</span> <span class="pre">m.end(group))</span></code>. Note
that if <em>group</em> did not contribute to the match, this is <code class="docutils literal"><span class="pre">(-1,</span> <span class="pre">-1)</span></code>.
<em>group</em> defaults to zero, the entire match.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.pos">
<code class="descclassname">match.</code><code class="descname">pos</code><a class="headerlink" href="#re.match.pos" title="Permalink to this definition">¶</a></dt>
<dd><p>The value of <em>pos</em> which was passed to the <a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> or
<a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a> method of a <a class="reference internal" href="#re-objects"><span>regex object</span></a>.  This is
the index into the string at which the RE engine started looking for a match.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.endpos">
<code class="descclassname">match.</code><code class="descname">endpos</code><a class="headerlink" href="#re.match.endpos" title="Permalink to this definition">¶</a></dt>
<dd><p>The value of <em>endpos</em> which was passed to the <a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> or
<a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a> method of a <a class="reference internal" href="#re-objects"><span>regex object</span></a>.  This is
the index into the string beyond which the RE engine will not go.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.lastindex">
<code class="descclassname">match.</code><code class="descname">lastindex</code><a class="headerlink" href="#re.match.lastindex" title="Permalink to this definition">¶</a></dt>
<dd><p>The integer index of the last matched capturing group, or <code class="docutils literal"><span class="pre">None</span></code> if no group
was matched at all. For example, the expressions <code class="docutils literal"><span class="pre">(a)b</span></code>, <code class="docutils literal"><span class="pre">((a)(b))</span></code>, and
<code class="docutils literal"><span class="pre">((ab))</span></code> will have <code class="docutils literal"><span class="pre">lastindex</span> <span class="pre">==</span> <span class="pre">1</span></code> if applied to the string <code class="docutils literal"><span class="pre">'ab'</span></code>, while
the expression <code class="docutils literal"><span class="pre">(a)(b)</span></code> will have <code class="docutils literal"><span class="pre">lastindex</span> <span class="pre">==</span> <span class="pre">2</span></code>, if applied to the same
string.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.lastgroup">
<code class="descclassname">match.</code><code class="descname">lastgroup</code><a class="headerlink" href="#re.match.lastgroup" title="Permalink to this definition">¶</a></dt>
<dd><p>The name of the last matched capturing group, or <code class="docutils literal"><span class="pre">None</span></code> if the group didn&#8217;t
have a name, or if no group was matched at all.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.re">
<code class="descclassname">match.</code><code class="descname">re</code><a class="headerlink" href="#re.match.re" title="Permalink to this definition">¶</a></dt>
<dd><p>The regular expression object whose <a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a> or
<a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a> method produced this match instance.</p>
</dd></dl>

<dl class="attribute">
<dt id="re.match.string">
<code class="descclassname">match.</code><code class="descname">string</code><a class="headerlink" href="#re.match.string" title="Permalink to this definition">¶</a></dt>
<dd><p>The string passed to <a class="reference internal" href="#re.regex.match" title="re.regex.match"><code class="xref py py-meth docutils literal"><span class="pre">match()</span></code></a> or <a class="reference internal" href="#re.regex.search" title="re.regex.search"><code class="xref py py-meth docutils literal"><span class="pre">search()</span></code></a>.</p>
</dd></dl>

</div>
<div class="section" id="regular-expression-examples">
<span id="re-examples"></span><h2>6.2.5. Regular Expression Examples<a class="headerlink" href="#regular-expression-examples" title="Permalink to this headline">¶</a></h2>
<div class="section" id="checking-for-a-pair">
<h3>6.2.5.1. Checking for a Pair<a class="headerlink" href="#checking-for-a-pair" title="Permalink to this headline">¶</a></h3>
<p>In this example, we&#8217;ll use the following helper function to display match
objects a little more gracefully:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">displaymatch</span><span class="p">(</span><span class="n">match</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">match</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="kc">None</span>
    <span class="k">return</span> <span class="s1">&#39;&lt;Match: </span><span class="si">%r</span><span class="s1">, groups=</span><span class="si">%r</span><span class="s1">&gt;&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(),</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">())</span>
</pre></div>
</div>
<p>Suppose you are writing a poker program where a player&#8217;s hand is represented as
a 5-character string with each character representing a card, &#8220;a&#8221; for ace, &#8220;k&#8221;
for king, &#8220;q&#8221; for queen, &#8220;j&#8221; for jack, &#8220;t&#8221; for 10, and &#8220;2&#8221; through &#8220;9&#8221;
representing the card with that value.</p>
<p>To see if a given string is a valid hand, one could do the following:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">valid</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">r&quot;^[a2-9tjqk]</span><span class="si">{5}</span><span class="s2">$&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">valid</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;akt5q&quot;</span><span class="p">))</span>  <span class="c1"># Valid.</span>
<span class="go">&quot;&lt;Match: &#39;akt5q&#39;, groups=()&gt;&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">valid</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;akt5e&quot;</span><span class="p">))</span>  <span class="c1"># Invalid.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">valid</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;akt&quot;</span><span class="p">))</span>    <span class="c1"># Invalid.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">valid</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;727ak&quot;</span><span class="p">))</span>  <span class="c1"># Valid.</span>
<span class="go">&quot;&lt;Match: &#39;727ak&#39;, groups=()&gt;&quot;</span>
</pre></div>
</div>
<p>That last hand, <code class="docutils literal"><span class="pre">&quot;727ak&quot;</span></code>, contained a pair, or two of the same valued cards.
To match this with a regular expression, one could use backreferences as such:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">pair</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">r&quot;.*(.).*\1&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;717ak&quot;</span><span class="p">))</span>     <span class="c1"># Pair of 7s.</span>
<span class="go">&quot;&lt;Match: &#39;717&#39;, groups=(&#39;7&#39;,)&gt;&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;718ak&quot;</span><span class="p">))</span>     <span class="c1"># No pairs.</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">displaymatch</span><span class="p">(</span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;354aa&quot;</span><span class="p">))</span>     <span class="c1"># Pair of aces.</span>
<span class="go">&quot;&lt;Match: &#39;354aa&#39;, groups=(&#39;a&#39;,)&gt;&quot;</span>
</pre></div>
</div>
<p>To find out what card the pair consists of, one could use the
<a class="reference internal" href="#re.match.group" title="re.match.group"><code class="xref py py-meth docutils literal"><span class="pre">group()</span></code></a> method of the match object in the following manner:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;717ak&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">&#39;7&#39;</span>

<span class="go"># Error because re.match() returns None, which doesn&#39;t have a group() method:</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;718ak&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;pyshell#23&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
    <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;.*(.).*\1&quot;</span><span class="p">,</span> <span class="s2">&quot;718ak&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gr">AttributeError</span>: <span class="n">&#39;NoneType&#39; object has no attribute &#39;group&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">pair</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;354aa&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">&#39;a&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="simulating-scanf">
<h3>6.2.5.2. Simulating scanf()<a class="headerlink" href="#simulating-scanf" title="Permalink to this headline">¶</a></h3>
<p id="index-0">Python does not currently have an equivalent to <code class="xref c c-func docutils literal"><span class="pre">scanf()</span></code>.  Regular
expressions are generally more powerful, though also more verbose, than
<code class="xref c c-func docutils literal"><span class="pre">scanf()</span></code> format strings.  The table below offers some more-or-less
equivalent mappings between <code class="xref c c-func docutils literal"><span class="pre">scanf()</span></code> format tokens and regular
expressions.</p>
<table border="1" class="docutils">
<colgroup>
<col width="42%" />
<col width="58%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head"><code class="xref c c-func docutils literal"><span class="pre">scanf()</span></code> Token</th>
<th class="head">Regular Expression</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><code class="docutils literal"><span class="pre">%c</span></code></td>
<td><code class="docutils literal"><span class="pre">.</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">%5c</span></code></td>
<td><code class="docutils literal"><span class="pre">.{5}</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">%d</span></code></td>
<td><code class="docutils literal"><span class="pre">[-+]?\d+</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">%e</span></code>, <code class="docutils literal"><span class="pre">%E</span></code>, <code class="docutils literal"><span class="pre">%f</span></code>, <code class="docutils literal"><span class="pre">%g</span></code></td>
<td><code class="docutils literal"><span class="pre">[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">%i</span></code></td>
<td><code class="docutils literal"><span class="pre">[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">%o</span></code></td>
<td><code class="docutils literal"><span class="pre">[-+]?[0-7]+</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">%s</span></code></td>
<td><code class="docutils literal"><span class="pre">\S+</span></code></td>
</tr>
<tr class="row-odd"><td><code class="docutils literal"><span class="pre">%u</span></code></td>
<td><code class="docutils literal"><span class="pre">\d+</span></code></td>
</tr>
<tr class="row-even"><td><code class="docutils literal"><span class="pre">%x</span></code>, <code class="docutils literal"><span class="pre">%X</span></code></td>
<td><code class="docutils literal"><span class="pre">[-+]?(0[xX])?[\dA-Fa-f]+</span></code></td>
</tr>
</tbody>
</table>
<p>To extract the filename and numbers from a string like</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">sendmail</span> <span class="o">-</span> <span class="mi">0</span> <span class="n">errors</span><span class="p">,</span> <span class="mi">4</span> <span class="n">warnings</span>
</pre></div>
</div>
<p>you would use a <code class="xref c c-func docutils literal"><span class="pre">scanf()</span></code> format like</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="o">%</span><span class="n">s</span> <span class="o">-</span> <span class="o">%</span><span class="n">d</span> <span class="n">errors</span><span class="p">,</span> <span class="o">%</span><span class="n">d</span> <span class="n">warnings</span>
</pre></div>
</div>
<p>The equivalent regular expression would be</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="p">(</span>\<span class="n">S</span><span class="o">+</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span>\<span class="n">d</span><span class="o">+</span><span class="p">)</span> <span class="n">errors</span><span class="p">,</span> <span class="p">(</span>\<span class="n">d</span><span class="o">+</span><span class="p">)</span> <span class="n">warnings</span>
</pre></div>
</div>
</div>
<div class="section" id="search-vs-match">
<span id="id2"></span><h3>6.2.5.3. search() vs. match()<a class="headerlink" href="#search-vs-match" title="Permalink to this headline">¶</a></h3>
<p>Python offers two different primitive operations based on regular expressions:
<a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-func docutils literal"><span class="pre">re.match()</span></code></a> checks for a match only at the beginning of the string, while
<a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">re.search()</span></code></a> checks for a match anywhere in the string (this is what Perl
does by default).</p>
<p>For example:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;abcdef&quot;</span><span class="p">)</span>  <span class="c1"># No match</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;abcdef&quot;</span><span class="p">)</span> <span class="c1"># Match</span>
<span class="go">&lt;_sre.SRE_Match object; span=(2, 3), match=&#39;c&#39;&gt;</span>
</pre></div>
</div>
<p>Regular expressions beginning with <code class="docutils literal"><span class="pre">'^'</span></code> can be used with <a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a> to
restrict the match at the beginning of the string:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span> <span class="s2">&quot;abcdef&quot;</span><span class="p">)</span>  <span class="c1"># No match</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;^c&quot;</span><span class="p">,</span> <span class="s2">&quot;abcdef&quot;</span><span class="p">)</span> <span class="c1"># No match</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;^a&quot;</span><span class="p">,</span> <span class="s2">&quot;abcdef&quot;</span><span class="p">)</span>  <span class="c1"># Match</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 1), match=&#39;a&#39;&gt;</span>
</pre></div>
</div>
<p>Note however that in <a class="reference internal" href="#re.MULTILINE" title="re.MULTILINE"><code class="xref py py-const docutils literal"><span class="pre">MULTILINE</span></code></a> mode <a class="reference internal" href="#re.match" title="re.match"><code class="xref py py-func docutils literal"><span class="pre">match()</span></code></a> only matches at the
beginning of the string, whereas using <a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a> with a regular expression
beginning with <code class="docutils literal"><span class="pre">'^'</span></code> will match at the beginning of each line.</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s1">&#39;X&#39;</span><span class="p">,</span> <span class="s1">&#39;A</span><span class="se">\n</span><span class="s1">B</span><span class="se">\n</span><span class="s1">X&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span><span class="p">)</span>  <span class="c1"># No match</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;^X&#39;</span><span class="p">,</span> <span class="s1">&#39;A</span><span class="se">\n</span><span class="s1">B</span><span class="se">\n</span><span class="s1">X&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span><span class="p">)</span>  <span class="c1"># Match</span>
<span class="go">&lt;_sre.SRE_Match object; span=(4, 5), match=&#39;X&#39;&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="making-a-phonebook">
<h3>6.2.5.4. Making a Phonebook<a class="headerlink" href="#making-a-phonebook" title="Permalink to this headline">¶</a></h3>
<p><a class="reference internal" href="#re.split" title="re.split"><code class="xref py py-func docutils literal"><span class="pre">split()</span></code></a> splits a string into a list delimited by the passed pattern.  The
method is invaluable for converting textual data into data structures that can be
easily read and modified by Python as demonstrated in the following example that
creates a phonebook.</p>
<p>First, here is the input.  Normally it may come from a file, here we are using
triple-quoted string syntax:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;Ross McFluff: 834.345.1254 155 Elm Street</span>
<span class="gp">...</span><span class="s2"></span>
<span class="gp">... </span><span class="s2">Ronald Heathmore: 892.345.3428 436 Finley Avenue</span>
<span class="gp">... </span><span class="s2">Frank Burger: 925.541.7625 662 South Dogwood Way</span>
<span class="gp">...</span><span class="s2"></span>
<span class="gp">...</span><span class="s2"></span>
<span class="gp">... </span><span class="s2">Heather Albrecht: 548.326.4584 919 Park Place&quot;&quot;&quot;</span>
</pre></div>
</div>
<p>The entries are separated by one or more newlines. Now we convert the string
into a list with each nonempty line having its own entry:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">entries</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">+&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">entries</span>
<span class="go">[&#39;Ross McFluff: 834.345.1254 155 Elm Street&#39;,</span>
<span class="go">&#39;Ronald Heathmore: 892.345.3428 436 Finley Avenue&#39;,</span>
<span class="go">&#39;Frank Burger: 925.541.7625 662 South Dogwood Way&#39;,</span>
<span class="go">&#39;Heather Albrecht: 548.326.4584 919 Park Place&#39;]</span>
</pre></div>
</div>
<p>Finally, split each entry into a list with first name, last name, telephone
number, and address.  We use the <code class="docutils literal"><span class="pre">maxsplit</span></code> parameter of <a class="reference internal" href="#re.split" title="re.split"><code class="xref py py-func docutils literal"><span class="pre">split()</span></code></a>
because the address has spaces, our splitting pattern, in it:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:? &quot;</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">]</span>
<span class="go">[[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834.345.1254&#39;, &#39;155 Elm Street&#39;],</span>
<span class="go">[&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892.345.3428&#39;, &#39;436 Finley Avenue&#39;],</span>
<span class="go">[&#39;Frank&#39;, &#39;Burger&#39;, &#39;925.541.7625&#39;, &#39;662 South Dogwood Way&#39;],</span>
<span class="go">[&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548.326.4584&#39;, &#39;919 Park Place&#39;]]</span>
</pre></div>
</div>
<p>The <code class="docutils literal"><span class="pre">:?</span></code> pattern matches the colon after the last name, so that it does not
occur in the result list.  With a <code class="docutils literal"><span class="pre">maxsplit</span></code> of <code class="docutils literal"><span class="pre">4</span></code>, we could separate the
house number from the street name:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:? &quot;</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">entries</span><span class="p">]</span>
<span class="go">[[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834.345.1254&#39;, &#39;155&#39;, &#39;Elm Street&#39;],</span>
<span class="go">[&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892.345.3428&#39;, &#39;436&#39;, &#39;Finley Avenue&#39;],</span>
<span class="go">[&#39;Frank&#39;, &#39;Burger&#39;, &#39;925.541.7625&#39;, &#39;662&#39;, &#39;South Dogwood Way&#39;],</span>
<span class="go">[&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548.326.4584&#39;, &#39;919&#39;, &#39;Park Place&#39;]]</span>
</pre></div>
</div>
</div>
<div class="section" id="text-munging">
<h3>6.2.5.5. Text Munging<a class="headerlink" href="#text-munging" title="Permalink to this headline">¶</a></h3>
<p><a class="reference internal" href="#re.sub" title="re.sub"><code class="xref py py-func docutils literal"><span class="pre">sub()</span></code></a> replaces every occurrence of a pattern with a string or the
result of a function.  This example demonstrates using <a class="reference internal" href="#re.sub" title="re.sub"><code class="xref py py-func docutils literal"><span class="pre">sub()</span></code></a> with
a function to &#8220;munge&#8221; text, or randomize the order of all the characters
in each word of a sentence except for the first and last characters:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">repl</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
<span class="gp">... </span>  <span class="n">inner_word</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="gp">... </span>  <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">inner_word</span><span class="p">)</span>
<span class="gp">... </span>  <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">inner_word</span><span class="p">)</span> <span class="o">+</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;Professor Abdolmalek, please report your absences promptly.&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">r&quot;(\w)(\w+)(\w)&quot;</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="go">&#39;Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">r&quot;(\w)(\w+)(\w)&quot;</span><span class="p">,</span> <span class="n">repl</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="go">&#39;Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="finding-all-adverbs">
<h3>6.2.5.6. Finding all Adverbs<a class="headerlink" href="#finding-all-adverbs" title="Permalink to this headline">¶</a></h3>
<p><a class="reference internal" href="#re.findall" title="re.findall"><code class="xref py py-func docutils literal"><span class="pre">findall()</span></code></a> matches <em>all</em> occurrences of a pattern, not just the first
one as <a class="reference internal" href="#re.search" title="re.search"><code class="xref py py-func docutils literal"><span class="pre">search()</span></code></a> does.  For example, if one was a writer and wanted to
find all of the adverbs in some text, he or she might use <a class="reference internal" href="#re.findall" title="re.findall"><code class="xref py py-func docutils literal"><span class="pre">findall()</span></code></a> in
the following manner:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;He was carefully disguised but captured quickly by police.&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">r&quot;\w+ly&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="go">[&#39;carefully&#39;, &#39;quickly&#39;]</span>
</pre></div>
</div>
</div>
<div class="section" id="finding-all-adverbs-and-their-positions">
<h3>6.2.5.7. Finding all Adverbs and their Positions<a class="headerlink" href="#finding-all-adverbs-and-their-positions" title="Permalink to this headline">¶</a></h3>
<p>If one wants more information about all matches of a pattern than the matched
text, <a class="reference internal" href="#re.finditer" title="re.finditer"><code class="xref py py-func docutils literal"><span class="pre">finditer()</span></code></a> is useful as it provides <a class="reference internal" href="#match-objects"><span>match objects</span></a> instead of strings.  Continuing with the previous example, if
one was a writer who wanted to find all of the adverbs <em>and their positions</em> in
some text, he or she would use <a class="reference internal" href="#re.finditer" title="re.finditer"><code class="xref py py-func docutils literal"><span class="pre">finditer()</span></code></a> in the following manner:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">text</span> <span class="o">=</span> <span class="s2">&quot;He was carefully disguised but captured quickly by police.&quot;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s2">r&quot;\w+ly&quot;</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%02d</span><span class="s1">-</span><span class="si">%02d</span><span class="s1">: </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">start</span><span class="p">(),</span> <span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>
<span class="go">07-16: carefully</span>
<span class="go">40-47: quickly</span>
</pre></div>
</div>
</div>
<div class="section" id="raw-string-notation">
<h3>6.2.5.8. Raw String Notation<a class="headerlink" href="#raw-string-notation" title="Permalink to this headline">¶</a></h3>
<p>Raw string notation (<code class="docutils literal"><span class="pre">r&quot;text&quot;</span></code>) keeps regular expressions sane.  Without it,
every backslash (<code class="docutils literal"><span class="pre">'\'</span></code>) in a regular expression would have to be prefixed with
another one to escape it.  For example, the two following lines of code are
functionally identical:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;\W(.)\1\W&quot;</span><span class="p">,</span> <span class="s2">&quot; ff &quot;</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 4), match=&#39; ff &#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\\</span><span class="s2">W(.)</span><span class="se">\\</span><span class="s2">1</span><span class="se">\\</span><span class="s2">W&quot;</span><span class="p">,</span> <span class="s2">&quot; ff &quot;</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 4), match=&#39; ff &#39;&gt;</span>
</pre></div>
</div>
<p>When one wants to match a literal backslash, it must be escaped in the regular
expression.  With raw string notation, this means <code class="docutils literal"><span class="pre">r&quot;\\&quot;</span></code>.  Without raw string
notation, one must use <code class="docutils literal"><span class="pre">&quot;\\\\&quot;</span></code>, making the following lines of code
functionally identical:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">r&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">r&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 1), match=&#39;\\&#39;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\\\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">r&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="go">&lt;_sre.SRE_Match object; span=(0, 1), match=&#39;\\&#39;&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="writing-a-tokenizer">
<h3>6.2.5.9. Writing a Tokenizer<a class="headerlink" href="#writing-a-tokenizer" title="Permalink to this headline">¶</a></h3>
<p>A <a class="reference external" href="https://en.wikipedia.org/wiki/Lexical_analysis">tokenizer or scanner</a>
analyzes a string to categorize groups of characters.  This is a useful first
step in writing a compiler or interpreter.</p>
<p>The text categories are specified with regular expressions.  The technique is
to combine those into a single master regular expression and to loop over
successive matches:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">collections</span>
<span class="kn">import</span> <span class="nn">re</span>

<span class="n">Token</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Token&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;typ&#39;</span><span class="p">,</span> <span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;line&#39;</span><span class="p">,</span> <span class="s1">&#39;column&#39;</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">tokenize</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="n">keywords</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;IF&#39;</span><span class="p">,</span> <span class="s1">&#39;THEN&#39;</span><span class="p">,</span> <span class="s1">&#39;ENDIF&#39;</span><span class="p">,</span> <span class="s1">&#39;FOR&#39;</span><span class="p">,</span> <span class="s1">&#39;NEXT&#39;</span><span class="p">,</span> <span class="s1">&#39;GOSUB&#39;</span><span class="p">,</span> <span class="s1">&#39;RETURN&#39;</span><span class="p">}</span>
    <span class="n">token_specification</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="s1">&#39;NUMBER&#39;</span><span class="p">,</span>  <span class="s1">r&#39;\d+(\.\d*)?&#39;</span><span class="p">),</span> <span class="c1"># Integer or decimal number</span>
        <span class="p">(</span><span class="s1">&#39;ASSIGN&#39;</span><span class="p">,</span>  <span class="s1">r&#39;:=&#39;</span><span class="p">),</span>          <span class="c1"># Assignment operator</span>
        <span class="p">(</span><span class="s1">&#39;END&#39;</span><span class="p">,</span>     <span class="s1">r&#39;;&#39;</span><span class="p">),</span>           <span class="c1"># Statement terminator</span>
        <span class="p">(</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span>      <span class="s1">r&#39;[A-Za-z]+&#39;</span><span class="p">),</span>   <span class="c1"># Identifiers</span>
        <span class="p">(</span><span class="s1">&#39;OP&#39;</span><span class="p">,</span>      <span class="s1">r&#39;[+\-*/]&#39;</span><span class="p">),</span>     <span class="c1"># Arithmetic operators</span>
        <span class="p">(</span><span class="s1">&#39;NEWLINE&#39;</span><span class="p">,</span> <span class="s1">r&#39;\n&#39;</span><span class="p">),</span>          <span class="c1"># Line endings</span>
        <span class="p">(</span><span class="s1">&#39;SKIP&#39;</span><span class="p">,</span>    <span class="s1">r&#39;[ \t]+&#39;</span><span class="p">),</span>      <span class="c1"># Skip over spaces and tabs</span>
        <span class="p">(</span><span class="s1">&#39;MISMATCH&#39;</span><span class="p">,</span><span class="s1">r&#39;.&#39;</span><span class="p">),</span>           <span class="c1"># Any other character</span>
    <span class="p">]</span>
    <span class="n">tok_regex</span> <span class="o">=</span> <span class="s1">&#39;|&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;(?P&lt;</span><span class="si">%s</span><span class="s1">&gt;</span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="n">pair</span> <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">token_specification</span><span class="p">)</span>
    <span class="n">line_num</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">line_start</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">mo</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="n">tok_regex</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
        <span class="n">kind</span> <span class="o">=</span> <span class="n">mo</span><span class="o">.</span><span class="n">lastgroup</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">mo</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="n">kind</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;NEWLINE&#39;</span><span class="p">:</span>
            <span class="n">line_start</span> <span class="o">=</span> <span class="n">mo</span><span class="o">.</span><span class="n">end</span><span class="p">()</span>
            <span class="n">line_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;SKIP&#39;</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">elif</span> <span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;MISMATCH&#39;</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%r</span><span class="s1"> unexpected on line </span><span class="si">%d</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">line_num</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;ID&#39;</span> <span class="ow">and</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">:</span>
                <span class="n">kind</span> <span class="o">=</span> <span class="n">value</span>
            <span class="n">column</span> <span class="o">=</span> <span class="n">mo</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="o">-</span> <span class="n">line_start</span>
            <span class="k">yield</span> <span class="n">Token</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">line_num</span><span class="p">,</span> <span class="n">column</span><span class="p">)</span>

<span class="n">statements</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span>
<span class="s1">    IF quantity THEN</span>
<span class="s1">        total := total + price * quantity;</span>
<span class="s1">        tax := price * 0.05;</span>
<span class="s1">    ENDIF;</span>
<span class="s1">&#39;&#39;&#39;</span>

<span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokenize</span><span class="p">(</span><span class="n">statements</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</pre></div>
</div>
<p>The tokenizer produces the following output:</p>
<div class="highlight-python3"><div class="highlight"><pre><span></span><span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;IF&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;IF&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;THEN&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;THEN&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;total&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ASSIGN&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;:=&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;total&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">17</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;OP&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;OP&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">31</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;quantity&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">33</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;END&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;;&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;tax&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ASSIGN&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;:=&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ID&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;OP&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">21</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;NUMBER&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;0.05&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">23</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;END&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;;&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">27</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;ENDIF&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;ENDIF&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">Token</span><span class="p">(</span><span class="n">typ</span><span class="o">=</span><span class="s1">&#39;END&#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s1">&#39;;&#39;</span><span class="p">,</span> <span class="n">line</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="../contents.html">Table Of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">6.2. <code class="docutils literal"><span class="pre">re</span></code> &#8212; Regular expression operations</a><ul>
<li><a class="reference internal" href="#regular-expression-syntax">6.2.1. Regular Expression Syntax</a></li>
<li><a class="reference internal" href="#module-contents">6.2.2. Module Contents</a></li>
<li><a class="reference internal" href="#regular-expression-objects">6.2.3. Regular Expression Objects</a></li>
<li><a class="reference internal" href="#match-objects">6.2.4. Match Objects</a></li>
<li><a class="reference internal" href="#regular-expression-examples">6.2.5. Regular Expression Examples</a><ul>
<li><a class="reference internal" href="#checking-for-a-pair">6.2.5.1. Checking for a Pair</a></li>
<li><a class="reference internal" href="#simulating-scanf">6.2.5.2. Simulating scanf()</a></li>
<li><a class="reference internal" href="#search-vs-match">6.2.5.3. search() vs. match()</a></li>
<li><a class="reference internal" href="#making-a-phonebook">6.2.5.4. Making a Phonebook</a></li>
<li><a class="reference internal" href="#text-munging">6.2.5.5. Text Munging</a></li>
<li><a class="reference internal" href="#finding-all-adverbs">6.2.5.6. Finding all Adverbs</a></li>
<li><a class="reference internal" href="#finding-all-adverbs-and-their-positions">6.2.5.7. Finding all Adverbs and their Positions</a></li>
<li><a class="reference internal" href="#raw-string-notation">6.2.5.8. Raw String Notation</a></li>
<li><a class="reference internal" href="#writing-a-tokenizer">6.2.5.9. Writing a Tokenizer</a></li>
</ul>
</li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class="topless"><a href="string.html"
                        title="previous chapter">6.1. <code class="docutils literal"><span class="pre">string</span></code> &#8212; Common string operations</a></p>
  <h4>Next topic</h4>
  <p class="topless"><a href="difflib.html"
                        title="next chapter">6.3. <code class="docutils literal"><span class="pre">difflib</span></code> &#8212; Helpers for computing deltas</a></p>
<h3>This Page</h3>
<ul class="this-page-menu">
  <li><a href="../bugs.html">Report a Bug</a></li>
  <li><a href="../_sources/library/re.txt"
         rel="nofollow">Show Source</a></li>
</ul>

<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    <p class="searchtip" style="font-size: 90%">
    Enter search terms or a module, class or function name.
    </p>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="difflib.html" title="6.3. difflib — Helpers for computing deltas"
             >next</a> |</li>
        <li class="right" >
          <a href="string.html" title="6.1. string — Common string operations"
             >previous</a> |</li>
        <li><img src="../_static/py.png" alt=""
                 style="vertical-align: middle; margin-top: -1px"/></li>
        <li><a href="https://www.python.org/">Python</a> &raquo;</li>
        <li>
          <span class="version_switcher_placeholder">3.5.1</span>
          <a href="../index.html">Documentation </a> &raquo;
        </li>

          <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="text.html" >6. Text Processing Services</a> &raquo;</li> 
      </ul>
    </div>  
    <div class="footer">
    &copy; <a href="../copyright.html">Copyright</a> 1990-2016, Python Software Foundation.
    <br />
    The Python Software Foundation is a non-profit corporation.
    <a href="https://www.python.org/psf/donations/">Please donate.</a>
    <br />
    Last updated on Feb 26, 2016.
    <a href="../bugs.html">Found a bug</a>?
    <br />
    Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.3.3.
    </div>

  </body>
</html>
Compiler Lecture Notes 1.0 documentation : http://di.ionio.gr/~mistral/tp/compilers/lecturedoc/index.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Μεταγλωττιστές - Σημειώσεις Μαθήματος και Εργαστηρίου &mdash; Compiler Lecture Notes 1.0 documentation</title>
    
    <link rel="stylesheet" href="_static/sphinxdoc.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="top" title="Compiler Lecture Notes 1.0 documentation" href="#" />
    <link rel="next" title="Βασικά Στοιχεία Python 3" href="unit1/module1.html" /> 
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="unit1/module1.html" title="Βασικά Στοιχεία Python 3"
             accesskey="N">next</a> |</li>
        <li><a href="#">Compiler Lecture Notes 1.0 documentation</a> &raquo;</li> 
      </ul>
    </div>

    <div class="document">
      <div class="documentwrapper">
          <div class="body">
            
  <div class="section" id="id1">
<h1>Μεταγλωττιστές - Σημειώσεις Μαθήματος και Εργαστηρίου<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h1>
<p>Περιεχόμενα:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="unit1/module1.html">Βασικά Στοιχεία Python 3</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#strings">Strings</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id1">Σύνθετα Αντικείμενα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#lists">Lists</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#dictionaries">Dictionaries</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id2">Αρχεία Κειμένου</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id3">Παράδειγμα: Συχνότητα Εμφάνισης Λέξεων</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit1/module1.html#id4">Μεταβλητές και Αναφορές</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="unit3/module1.html">Ενότητα 3-1</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#regular-expressions">Regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#python-regular-expressions">Python και regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#id2">Συνήθεις προδιαγραφές για regular expressions</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit3/module1.html#regular-expression">Μέθοδοι του αντικειμένου regular expression</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="unit4/module1.html">Scanning με το Plex</a><ul>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id1">Οδηγίες εγκατάστασης</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id2">Απλό παράδειγμα χωρίς έλεγχο λαθών</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#exception-handling">Προσθέτοντας έλεγχο λαθών (exception handling)</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#plex-patterns">Plex patterns</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id3">Κανόνες Ταιριάσματος</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id4">Ο κανόνας του μακρύτερου ταιριάσματος</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id5">Αγνοώντας κείμενο με βάση το μακρύτερο ταίριασμα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#id6">Σε ταίριασμα ίδιου μήκους προηγείται ό,τι δηλώθηκε πρώτα</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#single-line">Αγνοώντας single-line σχόλια</a></li>
<li class="toctree-l2"><a class="reference internal" href="unit4/module1.html#multiple-line">Αγνοώντας multiple-line σχόλια /* ... */</a></li>
</ul>
</li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="unit1/module1.html" title="Βασικά Στοιχεία Python 3"
             >next</a> |</li>
        <li><a href="#">Compiler Lecture Notes 1.0 documentation</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer">
        &copy; Copyright 2016, mistral.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.2.
    </div>
  </body>
</html>
Sphinx : http://sphinx-doc.org/
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Overview &mdash; Sphinx 1.4 documentation</title>
    
    <link rel="stylesheet" href="_static/sphinx13.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="https://media.readthedocs.org/css/badge_only.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '1.4',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js"></script>
    <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js"></script>
    <script type="text/javascript" src="https://media.readthedocs.org/javascript/underscore.js"></script>
    <script type="text/javascript" src="https://media.readthedocs.org/javascript/doctools.js"></script>
    <script type="text/javascript" src="https://media.readthedocs.org/javascript/readthedocs-doc-embed.js"></script>
    <link rel="search" type="application/opensearchdescription+xml"
          title="Search within Sphinx 1.4 documentation"
          href="_static/opensearch.xml"/>
    <link rel="top" title="Sphinx 1.4 documentation" href="contents.html" />
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300,400,700'
          rel='stylesheet' type='text/css' />
 
    <style type="text/css">
      table.right { float: right; margin-left: 20px; }
      table.right td { border: 1px solid #ccc; }
      
      .related { display: none; }
      
    </style>
    <script type="text/javascript">
      // intelligent scrolling of the sidebar content
      $(window).scroll(function() {
        var sb = $('.sphinxsidebarwrapper');
        var win = $(window);
        var sbh = sb.height();
        var offset = $('.sphinxsidebar').position()['top'];
        var wintop = win.scrollTop();
        var winbot = wintop + win.innerHeight();
        var curtop = sb.position()['top'];
        var curbot = curtop + sbh;
        // does sidebar fit in window?
        if (sbh < win.innerHeight()) {
          // yes: easy case -- always keep at the top
          sb.css('top', $u.min([$u.max([0, wintop - offset - 10]),
                                $(document).height() - sbh - 200]));
        } else {
          // no: only scroll if top/bottom edge of sidebar is at
          // top/bottom edge of window
          if (curtop > wintop && curbot > winbot) {
            sb.css('top', $u.max([wintop - offset - 10, 0]));
          } else if (curtop < wintop && curbot < winbot) {
            sb.css('top', $u.min([winbot - sbh - offset - 20,
                                  $(document).height() - sbh - 200]));
          }
        }
      });
    </script>

  
<!-- RTD Extra Head -->

<!-- 
Always link to the latest version, as canonical.
http://docs.readthedocs.org/en/latest/canonical.html
-->
<link rel="canonical" href="http://www.sphinx-doc.org/en/stable/" />

<link rel="stylesheet" href="https://media.readthedocs.org/css/readthedocs-doc-embed.css" type="text/css" />

<script type="text/javascript" src="_static/readthedocs-data.js"></script>

<!-- Add page-specific data, which must exist in the page js, not global -->
<script type="text/javascript">
READTHEDOCS_DATA['page'] = 'index'
</script>

<script type="text/javascript" src="_static/readthedocs-dynamic-include.js"></script>

<!-- end RTD <extrahead> --></head>
  <body role="document">
<div class="pageheader">
  <ul>
    <li><a href="#">Home</a></li>
    <li><a href="install.html">Get it</a></li>
    <li><a href="contents.html">Docs</a></li>
    <li><a href="develop.html">Extend/Develop</a></li>
  </ul>
  <div>
    <a href="#">
      <img src="_static/sphinxheader.png" alt="SPHINX" />
    </a>
  </div>
</div>

    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li><a href="#">Sphinx home</a>&nbsp;|</li>
        <li><a href="contents.html">Documentation</a> &raquo;</li>
 
      </ul>
    </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper"><p class="logo">A <a href="http://pocoo.org/">
  <img src="_static/pocoo.png" alt="Pocoo" /></a>
  project</p>

<h3>Download</h3>

<p>Current version: <b>1.4</b></p>
<p>Get Sphinx from the <a href="https://pypi.python.org/pypi/Sphinx">Python Package
Index</a>, or install it with:</p>
<pre>pip install -U Sphinx</pre>


<h3>Questions? Suggestions?</h3>

<p>Join the <a href="http://groups.google.com/group/sphinx-users">sphinx-users</a> mailing list on Google Groups:</p>
<form action="http://groups.google.com/group/sphinx-users/boxsubscribe"
      style="padding-left: 0.5em">
  <input type="text" name="email" value="your@email" style="font-size: 90%; width: 120px"
         onfocus="$(this).val('');"/>
  <input type="submit" name="sub" value="Subscribe" style="font-size: 90%; width: 70px"/>
</form>
<p>or come to the <tt>#sphinx-doc</tt> channel on FreeNode.</p>
<p>You can also open an issue at the
  <a href="https://github.com/sphinx-doc/sphinx/issues">tracker</a>.</p>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <h1>Welcome</h1>

  <div class="quotebar">
    <p><em>What users say:</em></p>
    <p>&ldquo;Cheers for a great tool that actually makes programmers <b>want</b>
      to write documentation!&rdquo;</p>
  </div>

  <p>
    Sphinx is a tool that makes it easy to create intelligent and beautiful
    documentation, written by Georg Brandl and licensed under the BSD license.</p>
  <p>It was originally created for <a href="https://docs.python.org/">the
    new Python documentation</a>, and it has excellent facilities for the
    documentation of Python projects, but C/C++ is already supported as well,
    and it is planned to add special support for other languages as well.  Of
    course, this site is also created from reStructuredText sources using
    Sphinx!  The following features should be highlighted:
  </p>
  <ul>
    <li><b>Output formats:</b> HTML (including Windows HTML Help), LaTeX (for
      printable PDF versions), ePub, Texinfo, manual pages, plain text</li>
    <li><b>Extensive cross-references:</b> semantic markup and automatic links
      for functions, classes, citations, glossary terms and similar pieces of
      information</li>
    <li><b>Hierarchical structure:</b> easy definition of a document tree, with
      automatic links to siblings, parents and children</li>
    <li><b>Automatic indices:</b> general index as well as a language-specific
      module indices</li>
    <li><b>Code handling:</b> automatic highlighting using the <a
      href="http://pygments.org">Pygments</a> highlighter</li>
    <li><b>Extensions:</b> automatic testing of code snippets, inclusion of
      docstrings from Python modules (API docs), and
      <a href="extensions.html#builtin-sphinx-extensions">more</a></li>
    <li><b>Contributed extensions:</b> more than
      50 extensions <a href="develop.html#extensions">contributed by users</a>
      in a second repository; most of them installable from PyPI</li>
  </ul>
  <p>
    Sphinx uses <a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>
    as its markup language, and many of its strengths come from the power and
    straightforwardness of reStructuredText and its parsing and translating
    suite, the <a href="http://docutils.sourceforge.net/">Docutils</a>.
  </p>

  <h2 style="margin-bottom: 0">Documentation</h2>

  <table class="contentstable" align="center" style="margin-left: 30px"><tr>
    <td width="50%">
      <p class="biglink"><a class="biglink" href="tutorial.html">First steps with Sphinx</a><br/>
         <span class="linkdescr">overview of basic tasks</span></p>
      <p class="biglink"><a class="biglink" href="contents.html">Contents</a><br/>
         <span class="linkdescr">for a complete overview</span></p>
    </td><td width="50%">
      <p class="biglink"><a class="biglink" href="search.html">Search page</a><br/>
         <span class="linkdescr">search the documentation</span></p>
      <p class="biglink"><a class="biglink" href="genindex.html">General Index</a><br/>
         <span class="linkdescr">all functions, classes, terms</span></p>
    </td></tr>
  </table>

  <p>
    You can also download PDF/EPUB versions of the Sphinx documentation:
    a <a href="http://readthedocs.org/projects/sphinx/downloads/pdf/stable/">PDF version</a> generated from
    the LaTeX Sphinx produces, and
    a <a href="http://readthedocs.org/projects/sphinx/downloads/epub/stable/">EPUB version</a>.
   
  </p>

  <h2>Examples</h2>
  <p>Links to documentation generated with Sphinx can be found on the
    <a href="examples.html">Projects using Sphinx</a> page.
  </p>
  <p>
    For examples of how Sphinx source files look, use the &#8220;Show
    source&#8221; links on all pages of the documentation apart from this
    welcome page.
  </p>

  <p>You may also be interested in the very nice
    <a href="http://matplotlib.sourceforge.net/sampledoc/">tutorial</a> on how to
    create a customized documentation using Sphinx written by the matplotlib
    developers.</p>

  <p>There is a <a href="http://docs.sphinx-users.jp/">Japanese translation</a>
    of this documentation, thanks to the Japanese Sphinx user group.</p>
  <p>A Japanese book about Sphinx has been published by O'Reilly:
    <a href="http://www.oreilly.co.jp/books/9784873116488/">Sphinxをはじめよう /
      Learning Sphinx</a>.</p>
  <!-- <p><img src="_static/bookcover.png"/></p> -->


  <h2>Hosting</h2>

  <p>Need a place to host your Sphinx docs?
    <a href="http://readthedocs.org">readthedocs.org</a> hosts a lot of Sphinx docs
    already, and integrates well with projects' source control.  It also features a
    powerful built-in search that exceeds the possibilities of Sphinx' JavaScript-based
    offline search.</p>

  <h2>Contributor Guide</h2>
